{"searchDocs":[{"title":"1-Click Signup Demos","type":0,"sectionRef":"#","url":"/demo-1-click-signup","content":"","keywords":"","version":"Next"},{"title":"Live​","type":1,"pageTitle":"1-Click Signup Demos","url":"/demo-1-click-signup#live","content":" ","version":"Next","tagName":"h2"},{"title":"Hosted​","type":1,"pageTitle":"1-Click Signup Demos","url":"/demo-1-click-signup#hosted","content":" Sandbox​  Sandbox Testing We recommend that you test using your own phone number. This will allow you to receive SMS messages, which are necessary to test the full 1-Click Signup flow (but won't work for the test user). Supported Phone Numbers Currently, only US phone numbers work with 1-Click Signup (and we're able to source verified data for 95% of these numbers). Using your own phone number in sandbox, you'll receive dummy user data.  Without RedirectWith Redirect This flow applies if you do not implement step 2 (which is optional). Try the demo in the iframe below, or open it by scanning the QR code or clicking the link below: Open Demo in New Tab ↗ View Source Code on GitHub ↗   Production​  Production Usage In production, you need to use own phone number. The verified data we return will be your data! Supported Phone Numbers Currently, only US phone numbers work with 1-Click Signup (and we're able to source verified data for 95% of these numbers). If your phone number doesn't work with 1-Click Signup in production (and your phone number is a US number), that means it's in the 5% of US numbers we can't source verified data for. However, you can still manually input data to complete the flow.  Without RedirectWith Redirect This flow applies if you do not implement step 2(which is optional). Try the demo in the iframe below, or open it by scanning the QR code or clicking the link below: Open Demo in New Tab ↗ View Source Code on GitHub ↗   ","version":"Next","tagName":"h3"},{"title":"Non-Hosted​","type":1,"pageTitle":"1-Click Signup Demos","url":"/demo-1-click-signup#non-hosted","content":" Sandbox​  Sandbox Testing We recommend that you test using your own phone number. This will allow you to receive SMS messages, which are necessary to test the full 1-Click Signup flow (but won't work for the test user). Supported Phone Numbers Currently, only US phone numbers work with 1-Click Signup (and we're able to source verified data for 95% of these numbers). Using your own phone number in sandbox, you'll receive dummy user data.  Without RedirectWith Redirect This flow applies if you do implement Non-Hosted Variant. Try the demo in the iframe below, or open it by scanning the QR code or clicking the link below: Open Demo in New Tab ↗ View Source Code on GitHub ↗   Production​  Production Usage In production, you need to use own phone number. The verified data we return will be your data! Supported Phone Numbers Currently, only US phone numbers work with 1-Click Signup (and we're able to source verified data for 95% of these numbers). If your phone number doesn't work with 1-Click Signup in production (and your phone number is a US number), that means it's in the 5% of US numbers we can't source verified data for. However, you can still manually input data to complete the flow.  Without RedirectWith Redirect This flow applies if you do implement Non-Hosted Variant. Try the demo in the iframe below, or open it by scanning the QR code or clicking the link below: Open Demo in New Tab ↗ View Source Code on GitHub ↗   ","version":"Next","tagName":"h3"},{"title":"Static​","type":1,"pageTitle":"1-Click Signup Demos","url":"/demo-1-click-signup#static","content":" Without RedirectWith Redirect This flow applies if you do not implement step 2 (which is optional). ","version":"Next","tagName":"h2"},{"title":"atomic-credential-example","type":0,"sectionRef":"#","url":"/reusables/atomic-credential-example","content":"atomic-credential-example Example Atomic EmailCredential { &quot;id&quot;: &quot;8a1d4e35-413d-496b-b499-8810b55cfb5c&quot;, // the credential id &quot;type&quot;: &quot;EmailCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch // the data attribute must match the SsnCredential JSON schema properties as mentioned in the Data Schema section. // i.e. https://schema-resolver.verified.inc/jsonSchema/SsnCredential &quot;data&quot;: { &quot;email&quot;: &quot;test@verified.inc&quot; } } ","keywords":"","version":"Next"},{"title":"click-credentials-response-body-details","type":0,"sectionRef":"#","url":"/reusables/click-credentials-response-body-details","content":"click-credentials-response-body-details Example 1-Click User Data Response Body Example 1-click/trusted Response Body { &quot;uuid&quot;: &quot;5ed9eb5a-91d0-4beb-8fbd-7f8ddf594f23&quot;, &quot;identifiers&quot;: { &quot;phone&quot;: &quot;+14044327575&quot; }, &quot;credentials&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;Ray&quot;, &quot;lastName&quot;: &quot;Smets&quot; }, &quot;email&quot;: &quot;ray@verified.inc&quot;, &quot;phone&quot;: &quot;+14044321313&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1133 Broderick St&quot;, &quot;city&quot;: &quot;San Francisco&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;country&quot;: &quot;US&quot;, &quot;zipCode&quot;: &quot;94115&quot; }, &quot;birthDate&quot;: &quot;695131200000&quot;, &quot;ssn&quot;: &quot;111111900&quot; }, &quot;metadata&quot;: { &quot;id&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;2edb642b-d8d4-4be3-8904-689027896865&quot;, &quot;lastName&quot;: &quot;42018960-9d8c-4db9-bd14-113440716830&quot; }, &quot;email&quot;: &quot;dcab38ca-ff23-497f-bb6f-d886d60518e6&quot;, &quot;phone&quot;: &quot;2b07771c-eaf7-41ca-9761-df4463f166cc&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;e19c0b18-c18d-4e1b-b40f-f8b4804b33b0&quot;, &quot;city&quot;: &quot;7114ec91-e1cd-45a4-a78c-0de581a554a2&quot;, &quot;state&quot;: &quot;de8a0522-4ad7-477d-85d9-f16e8672e8e6&quot;, &quot;country&quot;: &quot;79e27322-ffcf-4cb3-b13b-acc2805596d5&quot;, &quot;zipCode&quot;: &quot;89ff5570-3539-463a-9be7-5780bfb7ce72&quot; }, &quot;birthDate&quot;: &quot;6ac7a777-b1ff-4a65-9999-06b4090159bc&quot;, &quot;ssn&quot;: &quot;3731d919-e66c-4e5e-9095-85d0da5b6462&quot; }, &quot;verificationMethod&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;phone_carrier&quot;, &quot;lastName&quot;: &quot;phone_carrier&quot; }, &quot;email&quot;: &quot;phone_carrier&quot;, &quot;phone&quot;: &quot;phone_carrier&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;phone_carrier&quot;, &quot;city&quot;: &quot;phone_carrier&quot;, &quot;state&quot;: &quot;phone_carrier&quot;, &quot;country&quot;: &quot;phone_carrier&quot;, &quot;zipCode&quot;: &quot;phone_carrier&quot; }, &quot;birthDate&quot;: &quot;phone_carrier&quot;, &quot;ssn&quot;: &quot;phone_carrier&quot; }, &quot;status&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;valid&quot;, &quot;lastName&quot;: &quot;valid&quot; }, &quot;email&quot;: &quot;valid&quot;, &quot;phone&quot;: &quot;valid&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;valid&quot;, &quot;city&quot;: &quot;valid&quot;, &quot;state&quot;: &quot;valid&quot;, &quot;country&quot;: &quot;valid&quot;, &quot;zipCode&quot;: &quot;valid&quot; }, &quot;birthDate&quot;: &quot;valid&quot;, &quot;ssn&quot;: &quot;valid&quot; }, &quot;expirationDate&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: null, &quot;lastName&quot;: null }, &quot;email&quot;: null, &quot;phone&quot;: null, &quot;address&quot;: { &quot;line1&quot;: null, &quot;city&quot;: null, &quot;state&quot;: null, &quot;country&quot;: null, &quot;zipCode&quot;: null }, &quot;birthDate&quot;: null, &quot;ssn&quot;: null }, &quot;issuanceDate&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;1708796694877&quot;, &quot;lastName&quot;: &quot;1708796694877&quot; }, &quot;email&quot;: &quot;1708796694883&quot;, &quot;phone&quot;: &quot;1708761085382&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1708796694883&quot;, &quot;city&quot;: &quot;1708796694883&quot;, &quot;state&quot;: &quot;1708796694883&quot;, &quot;country&quot;: &quot;1708796694883&quot;, &quot;zipCode&quot;: &quot;1708796694883&quot; }, &quot;birthDate&quot;: &quot;1708796694877&quot;, &quot;ssn&quot;: &quot;1708796694877&quot; }, &quot;issuerUuid&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;lastName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;email&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;phone&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;city&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;state&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;country&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;zipCode&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;birthDate&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;ssn&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;identifiers&quot;: { &quot;verificationMethod&quot;: { &quot;phone&quot;: null, &quot;email&quot;: null } } } } ","keywords":"","version":"Next"},{"title":"Issue to Earn Demos","type":0,"sectionRef":"#","url":"/demo-issue-to-earn","content":"","keywords":"","version":"Next"},{"title":"Static​","type":1,"pageTitle":"Issue to Earn Demos","url":"/demo-issue-to-earn#static","content":" Next User Sign InAfter User Sign UpMarketing EmailIn App Offer Richard is an existing, verified Hooli user. The next time he signs in, Hooli asks him if he wants to activate his Hooli digital ID card. When he clicks the Activate button, Hooli issues the card.  ","version":"Next","tagName":"h2"},{"title":"Live​","type":1,"pageTitle":"Issue to Earn Demos","url":"/demo-issue-to-earn#live","content":" ","version":"Next","tagName":"h2"},{"title":"Sandbox​","type":1,"pageTitle":"Issue to Earn Demos","url":"/demo-issue-to-earn#sandbox","content":" Standard IssuancePartner Issuance This flow applies if you implement standard issuance (not partner issuance). Use by filling in any email address and any password. Open Demo in New Tab ↗ View Source Code on GitHub ↗  ","version":"Next","tagName":"h3"},{"title":"Production​","type":1,"pageTitle":"Issue to Earn Demos","url":"/demo-issue-to-earn#production","content":" We don't provide production demos for Issue to Earn (like we do for 1-Click Signup) because all ID cards in production must contain real, verified data — not dummy data! ","version":"Next","tagName":"h3"},{"title":"Issue to Earn","type":0,"sectionRef":"#","url":"/issue-to-earn","content":"","keywords":"","version":"Next"},{"title":"How It Works​","type":1,"pageTitle":"Issue to Earn","url":"/issue-to-earn#how-it-works","content":" ","version":"Next","tagName":"h2"},{"title":"User Experience​","type":1,"pageTitle":"Issue to Earn","url":"/issue-to-earn#user-experience","content":" Try our Issue to Earn demos to see this user experience in action.  A user only needs to click 1 button to receive a digital ID card. (When they do, you make 1 API call behind the scenes.) It all takes less than 1 second!  Specifically, the user experience is:  See prompt to activate ID card (e.g. a button)Give consent (e.g. click button)Receive email showing new ID card  The prompt is often a button, as in our Next User Sign In, Marketing Email, and In App Offer demos. But it can also take other forms — like a checkbox, as in our After User Sign Up demo.  note This ID card is a purely digital one, and it has your brand on it. When you're ready for an API key for your brand, we will create an ID card design for you (or use one you send us).  ","version":"Next","tagName":"h3"},{"title":"Implement​","type":1,"pageTitle":"Issue to Earn","url":"/issue-to-earn#implement","content":" Try our Issue to Earn demos to see example implementations. These are open source, so feel free to use the source code as a reference.  You can issue an ID card to a user in many ways. All of them involve the same two steps:  Get user consentIssue credentials to user (1 API call)  ","version":"Next","tagName":"h2"},{"title":"1. Get User Consent​","type":1,"pageTitle":"Issue to Earn","url":"/issue-to-earn#1-get-user-consent","content":" You Must Get User Consent You must get a user's consent before issuing them an ID card. Not doing so violates our terms and will prevent us from paying you when the card is used.  Prompt the user to activate their digital ID card (from your brand). You can use a button prompt, as in our Next User Sign In, Marketing Email, and In App Offer demos. Or you can use another type of prompt — like a checkbox, as in our After User Sign Up demo.  Include this legal language:  By TAKING_THIS_ACTION, I direct YOUR_BRAND_NAME to use Verified Inc. to create a digital ID card with my personal information, and I agree to Verified Inc.’s Terms of Use and acknowledge its Privacy Policy.  Replace TAKING_THIS_ACTION with language appropriate to the nature of your prompt. For example, if your prompt is an Activate button, you could replace TAKING_THIS_ACTION with: clicking &quot;Activate&quot; Replace YOUR_BRAND_NAME with, well, your brand name!Make &quot;Terms of Use&quot; and &quot;Privacy Policy&quot; underlined or colored and hyperlinked to https://www.verified.inc/legal#terms-of-use and https://www.verified.inc/legal#privacy-policy (respectively).  Here's full example:  By clicking &quot;Activate&quot;, I direct Hooli to use Verified Inc. to create a digital ID card with my personal information, and I agree to Verified Inc.’s Terms of Use and acknowledge its Privacy Policy.  ","version":"Next","tagName":"h3"},{"title":"2. Issue Credentials to User​","type":1,"pageTitle":"Issue to Earn","url":"/issue-to-earn#2-issue-credentials-to-user","content":" An &quot;ID Card&quot; is a Collection of Credentials We define a digital ID card as a collection of credentials, issued by a brand to a user. We defined a credential as a piece of data about a user — like their phone number, address, or government ID. To &quot;issue an ID card&quot; is just to issue credentials to a user for the first time. (To &quot;update an ID card&quot; is just to issue subsequent credentials to that user.)  Call POST /credentials with a user identifier (a verified email or phone for the user) and one or more credentials. For each credential, include a type and data in accordance with one of our data schemas.  Ask Us for New Schemas If Needed If we don't have a data schema that suits your needs, email us at Support@Verified.Inc) and we'll make one for you.  For example, if you have a verified Social Security Number (SSN) and a full name for a user, you can issue them credentials. Just call POST /credentials with the user's email or phone, the SsnCredential and FullNameCredential type, and the SSN and full name data:  Example Issue Credentials Request Body { &quot;email&quot;: &quot;test@example.com&quot;, &quot;credentials&quot;: [ { &quot;type&quot;: &quot;SsnCredential&quot;, // based on the properties attribute of the schema // single object, not an array of objects, since Ssn is an atomic credential &quot;data&quot;: { &quot;ssn&quot;: &quot;111223333&quot; }, &quot;expirationDate&quot;: 1893484800000 }, { &quot;type&quot;: &quot;FullNameCredential&quot;, // based on the properties attribute of the schema // an array of objects, not a single object, since FullName is a composite credential &quot;data&quot;: [ { &quot;type&quot;: &quot;FirstNameCredential&quot;, &quot;data&quot;: { &quot;firstName&quot;: &quot;Richard&quot; } }, { &quot;type&quot;: &quot;LastNameCredential&quot;, &quot;data&quot;: { &quot;lastName&quot;: &quot;Hendricks&quot; } } ] } ] }   The credential data must be formatted according to the properties attribute of the credential type's schema definition. Please see our data schema library for more information.  ","version":"Next","tagName":"h3"},{"title":"(optional) Enable Affiliate Offers​","type":1,"pageTitle":"Issue to Earn","url":"/issue-to-earn#optional-enable-affiliate-offers","content":" The Implement section above describes how to implement standard issuance of ID cards. With standard issuance, you issue an ID card to a user, and that's it. There are no further steps.  But you can also implement partner issuance to enable affiliate offers for partner brands. With partner issuance, you issue an ID card to a user, and then you redirect them to a 1-Click Signup flow for the partner brand. That way, the user can immediately use their ID card to sign up for the partner, and you immediately earn revenue!  This allows you to present users with affiliate offers that convert with 1-click, meaning far higher conversion for partners and far more revenue for you.  Brands in our network that have implemented partner issuance have seen on average 7.9x higher conversion rates compared with normal affiliate offers.  If you'd like to enable partner issuance for your brand, email us at Support@Verified.Inc.  ","version":"Next","tagName":"h2"},{"title":"composite-credential-example","type":0,"sectionRef":"#","url":"/reusables/composite-credential-example","content":"composite-credential-example Example Composite FullNameCredential { &quot;id&quot;: &quot;1be7c008-3f0c-4a21-9aad-69ca1c4251d2&quot;, // the credential id &quot;type&quot;: &quot;FullNameCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch // the data attribute must match the FullNameCredential JSON schema properties as mentioned in the Data Schema section. // i.e. https://schema-resolver.verified.inc/jsonSchema/FullNameCredential &quot;data&quot;: [ { &quot;id&quot;: &quot;2e6a7b9a-e93e-43ba-98a9-c554f4e16457&quot;, // `FirstNameCredential` credential id &quot;type&quot;: &quot;FirstNameCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch &quot;data&quot;: { &quot;firstName&quot;: &quot;Richard&quot; } }, { &quot;id&quot;: &quot;9a5817ef-e621-4277-8c48-c8ee3776b6c4&quot;, // `LastNameCredential` credential id &quot;type&quot;: &quot;LastNameCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch &quot;data&quot;: { &quot;lastName&quot;: &quot;Hendricks&quot; } } ] } ","keywords":"","version":"Next"},{"title":"click-credentials-response-body-example","type":0,"sectionRef":"#","url":"/reusables/click-credentials-response-body-example","content":"click-credentials-response-body-example Example 1-click/trusted Response Body { &quot;uuid&quot;: &quot;5ed9eb5a-91d0-4beb-8fbd-7f8ddf594f23&quot;, &quot;identifiers&quot;: { &quot;phone&quot;: &quot;+14044327575&quot; }, &quot;credentials&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;Ray&quot;, &quot;lastName&quot;: &quot;Smets&quot; }, &quot;email&quot;: &quot;ray@verified.inc&quot;, &quot;phone&quot;: &quot;+14044321313&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1133 Broderick St&quot;, &quot;city&quot;: &quot;San Francisco&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;country&quot;: &quot;US&quot;, &quot;zipCode&quot;: &quot;94115&quot; }, &quot;birthDate&quot;: &quot;695131200000&quot;, &quot;ssn&quot;: &quot;111111900&quot; }, &quot;metadata&quot;: { &quot;id&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;2edb642b-d8d4-4be3-8904-689027896865&quot;, &quot;lastName&quot;: &quot;42018960-9d8c-4db9-bd14-113440716830&quot; }, &quot;email&quot;: &quot;dcab38ca-ff23-497f-bb6f-d886d60518e6&quot;, &quot;phone&quot;: &quot;2b07771c-eaf7-41ca-9761-df4463f166cc&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;e19c0b18-c18d-4e1b-b40f-f8b4804b33b0&quot;, &quot;city&quot;: &quot;7114ec91-e1cd-45a4-a78c-0de581a554a2&quot;, &quot;state&quot;: &quot;de8a0522-4ad7-477d-85d9-f16e8672e8e6&quot;, &quot;country&quot;: &quot;79e27322-ffcf-4cb3-b13b-acc2805596d5&quot;, &quot;zipCode&quot;: &quot;89ff5570-3539-463a-9be7-5780bfb7ce72&quot; }, &quot;birthDate&quot;: &quot;6ac7a777-b1ff-4a65-9999-06b4090159bc&quot;, &quot;ssn&quot;: &quot;3731d919-e66c-4e5e-9095-85d0da5b6462&quot; }, &quot;verificationMethod&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;phone_carrier&quot;, &quot;lastName&quot;: &quot;phone_carrier&quot; }, &quot;email&quot;: &quot;phone_carrier&quot;, &quot;phone&quot;: &quot;phone_carrier&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;phone_carrier&quot;, &quot;city&quot;: &quot;phone_carrier&quot;, &quot;state&quot;: &quot;phone_carrier&quot;, &quot;country&quot;: &quot;phone_carrier&quot;, &quot;zipCode&quot;: &quot;phone_carrier&quot; }, &quot;birthDate&quot;: &quot;phone_carrier&quot;, &quot;ssn&quot;: &quot;phone_carrier&quot; }, &quot;status&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;valid&quot;, &quot;lastName&quot;: &quot;valid&quot; }, &quot;email&quot;: &quot;valid&quot;, &quot;phone&quot;: &quot;valid&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;valid&quot;, &quot;city&quot;: &quot;valid&quot;, &quot;state&quot;: &quot;valid&quot;, &quot;country&quot;: &quot;valid&quot;, &quot;zipCode&quot;: &quot;valid&quot; }, &quot;birthDate&quot;: &quot;valid&quot;, &quot;ssn&quot;: &quot;valid&quot; }, &quot;expirationDate&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: null, &quot;lastName&quot;: null }, &quot;email&quot;: null, &quot;phone&quot;: null, &quot;address&quot;: { &quot;line1&quot;: null, &quot;city&quot;: null, &quot;state&quot;: null, &quot;country&quot;: null, &quot;zipCode&quot;: null }, &quot;birthDate&quot;: null, &quot;ssn&quot;: null }, &quot;issuanceDate&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;1708796694877&quot;, &quot;lastName&quot;: &quot;1708796694877&quot; }, &quot;email&quot;: &quot;1708796694883&quot;, &quot;phone&quot;: &quot;1708761085382&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1708796694883&quot;, &quot;city&quot;: &quot;1708796694883&quot;, &quot;state&quot;: &quot;1708796694883&quot;, &quot;country&quot;: &quot;1708796694883&quot;, &quot;zipCode&quot;: &quot;1708796694883&quot; }, &quot;birthDate&quot;: &quot;1708796694877&quot;, &quot;ssn&quot;: &quot;1708796694877&quot; }, &quot;issuerUuid&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;lastName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;email&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;phone&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;city&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;state&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;country&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;zipCode&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;birthDate&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;ssn&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;identifiers&quot;: { &quot;verificationMethod&quot;: { &quot;phone&quot;: null, &quot;email&quot;: null } } } } ","keywords":"","version":"Next"},{"title":"click-default-credential-request","type":0,"sectionRef":"#","url":"/reusables/click-default-credential-request","content":"click-default-credential-request Default 1-Click Credential Requests [ { &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;FirstNameCredential&quot; }, { &quot;type&quot;: &quot;MiddleNameCredential&quot; }, { &quot;type&quot;: &quot;LastNameCredential&quot; } ], &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;EmailCredential&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;PhoneCredential&quot; }, { &quot;type&quot;: &quot;AddressCredential&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;Line1Credential&quot; }, { &quot;type&quot;: &quot;Line2Credential&quot; }, { &quot;type&quot;: &quot;CityCredential&quot; }, { &quot;type&quot;: &quot;StateCredential&quot; }, { &quot;type&quot;: &quot;CountryCredential&quot; }, { &quot;type&quot;: &quot;ZipCodeCredential&quot; } ], &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;BirthDateCredential&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;SsnCredential&quot;, &quot;allowUserInput&quot;: true } ] ","keywords":"","version":"Next"},{"title":"credential-usage-example-snippet","type":0,"sectionRef":"#","url":"/reusables/credential-usage-example-snippet","content":"credential-usage-example-snippet Example Application Code Credential Handling import _ from 'lodash'; /** * Finds value in an object that matches a property name. * @param object * @param propertyName */ export function findByPropertyName&lt;Type&gt;( object: Record&lt;string, any&gt;, propertyName: string ): Type | undefined { if (_.has(object, propertyName)) { // a hit, return the value return object[propertyName]; } for (const key in object) { if (_.isArray(object[key])) { // if the value is an array, iterate over it and recursively call this function for (const item of object[key]) { const result = findByPropertyName(item, propertyName); if (result !== undefined) { return result as Type; } } } if (_.isPlainObject(object[key])) { // just look for the value in the object const result = findByPropertyName(object[key], propertyName); if (result !== undefined) { return result as Type; } } } // no hit, return undefined return undefined; } ","keywords":"","version":"Next"},{"title":"credential-request-code-snippet","type":0,"sectionRef":"#","url":"/reusables/credential-request-code-snippet","content":"credential-request-code-snippet CredentialRequest { type: string, // the type of credential data being requested issuers: string[], // list of acceptable brandIds; if empty, all issuer brands are valid required?: boolean, // @deprecated - Use mandatory field instead. If the credential is required mandatory?: 'yes' | 'no' | 'if_available' // if the credential is required, not required, or required if available. description?: string // a description field that is shown to the user; can be used to explain why the information is being requested allowUserInput?: boolean // when true, the user will be shown an input to add their own information if they choose. children?: CredentialRequest[] // list of sub-credentials relevant to the parent credential (e.g. FullNameCredential(FirstNameCredential, MiddleNameCredential LastNameCredential) } ","keywords":"","version":"Next"},{"title":"sandbox-testing-credentials","type":0,"sectionRef":"#","url":"/reusables/sandbox-testing-credentials","content":"sandbox-testing-credentials Sandbox Testing To test in our sandbox environment, you can use our test brand and user: Test Brand API Credentials Sandbox API Key yVg3LEnF08y0MDmpHcPxB+sZWFcDARmPRKdY2M906ng= Sandbox URL https://core-api.sandbox-verifiedinc.com To get an API key for your own brand, email us at Support@Verified.Inc. Test User Login Credentials Phone +10123456789 Email richard@piedpiper.net Verification Code 111111 These are Hooli and Richard Hendricks — yes, the ones from Silicon Valley! 😂","keywords":"","version":"Next"},{"title":"shared-credentials-body","type":0,"sectionRef":"#","url":"/reusables/shared-credentials-body","content":"shared-credentials-body Example Shared Credentials Body { &quot;uuid&quot;: &quot;23b9c628-3415-447e-a716-0fe1b4cf61ff&quot;, &quot;email&quot;: &quot;richard@piedpiper.net&quot;, &quot;phone&quot;: &quot;+79553044233&quot;, &quot;credentials&quot;: [ { &quot;id&quot;: &quot;8a1d4e35-413d-496b-b499-8810b55cfb5c&quot;, &quot;type&quot;: &quot;SsnCredential&quot;, &quot;data&quot;: { &quot;ssn&quot;: &quot;111223333&quot; }, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, }, { &quot;id&quot;: &quot;1be7c008-3f0c-4a21-9aad-69ca1c4251d2&quot;, &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;data&quot;: [ { &quot;id&quot;: &quot;2e6a7b9a-e93e-43ba-98a9-c554f4e16457&quot;, &quot;type&quot;: &quot;FirstNameCredential&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;data&quot;: { &quot;firstName&quot;: &quot;Richard&quot; } }, { &quot;id&quot;: &quot;9a5817ef-e621-4277-8c48-c8ee3776b6c4&quot;, &quot;type&quot;: &quot;LastNameCredential&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;data&quot;: { &quot;lastName&quot;: &quot;Hendricks&quot; } } ] } ] } ","keywords":"","version":"Next"},{"title":"shared-credentials-body-details","type":0,"sectionRef":"#","url":"/reusables/shared-credentials-body-details","content":"shared-credentials-body-details Example Shared Credentials Body Example Shared Credentials Body { &quot;uuid&quot;: &quot;23b9c628-3415-447e-a716-0fe1b4cf61ff&quot;, &quot;email&quot;: &quot;richard@piedpiper.net&quot;, &quot;phone&quot;: &quot;+79553044233&quot;, &quot;credentials&quot;: [ { &quot;id&quot;: &quot;8a1d4e35-413d-496b-b499-8810b55cfb5c&quot;, &quot;type&quot;: &quot;SsnCredential&quot;, &quot;data&quot;: { &quot;ssn&quot;: &quot;111223333&quot; }, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, }, { &quot;id&quot;: &quot;1be7c008-3f0c-4a21-9aad-69ca1c4251d2&quot;, &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;data&quot;: [ { &quot;id&quot;: &quot;2e6a7b9a-e93e-43ba-98a9-c554f4e16457&quot;, &quot;type&quot;: &quot;FirstNameCredential&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;data&quot;: { &quot;firstName&quot;: &quot;Richard&quot; } }, { &quot;id&quot;: &quot;9a5817ef-e621-4277-8c48-c8ee3776b6c4&quot;, &quot;type&quot;: &quot;LastNameCredential&quot;, &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, &quot;issuanceDate&quot;: &quot;1671847264479&quot;, &quot;expirationDate&quot;: &quot;1871839024044&quot;, &quot;data&quot;: { &quot;lastName&quot;: &quot;Hendricks&quot; } } ] } ] } ","keywords":"","version":"Next"},{"title":"shared-credentials-body-atomic","type":0,"sectionRef":"#","url":"/reusables/shared-credentials-body-atomic","content":"shared-credentials-body-atomic Example Response Body { &quot;uuid&quot;: &quot;d2fc31c3-8174-4e61-ab85-65be6446e8cf&quot;, // the sharedCredentialsUuid &quot;phone&quot;: &quot;+14044327570&quot;, &quot;credentials&quot;: [ { &quot;id&quot;: &quot;8743dce2-b0d3-46bd-a866-7af1b389ff0f&quot;, &quot;createdAt&quot;: &quot;1703101781006&quot;, &quot;updatedAt&quot;: &quot;1703101781006&quot;, &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781005&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;fullName&quot;: &quot;Richard Hendricks&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;53622515-7509-4ed1-9d70-5c3f17c148d9&quot;, &quot;createdAt&quot;: &quot;1703101772943&quot;, &quot;updatedAt&quot;: &quot;1703101772943&quot;, &quot;type&quot;: &quot;PhoneCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101772943&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;phone&quot;: &quot;+14044327070&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;2a9b6f78-eaaf-4526-a131-d919d1a1d0cb&quot;, &quot;createdAt&quot;: &quot;1703101781008&quot;, &quot;updatedAt&quot;: &quot;1703101781008&quot;, &quot;type&quot;: &quot;AddressCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781006&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;address&quot;: &quot;6536 Del Playa Dr, Goleta, US-CA 93117-5117&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;46dc73e8-659e-41f8-be66-f7cedad26bd8&quot;, &quot;createdAt&quot;: &quot;1703101781006&quot;, &quot;updatedAt&quot;: &quot;1703101781006&quot;, &quot;type&quot;: &quot;BirthDateCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781005&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;birthDate&quot;: &quot;721310400000&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;e3a55df0-2245-4ec2-ad6a-64ba186a7089&quot;, &quot;createdAt&quot;: &quot;1703101781006&quot;, &quot;updatedAt&quot;: &quot;1703101781006&quot;, &quot;type&quot;: &quot;SsnCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781005&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;ssn&quot;: &quot;333224444&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; } ] } ","keywords":"","version":"Next"},{"title":"simplified-credentials-body","type":0,"sectionRef":"#","url":"/reusables/simplified-credentials-body","content":"simplified-credentials-body Example Simplified Credentials Format { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;Leonardo&quot;, &quot;lastName&quot;: &quot;Messi&quot; }, &quot;ssn&quot;: &quot;111111110&quot;, &quot;email&quot;: &quot;leonardo@verified.inc&quot; } ","keywords":"","version":"Next"},{"title":"simplified-credentials-body-details","type":0,"sectionRef":"#","url":"/reusables/simplified-credentials-body-details","content":"simplified-credentials-body-details Example Simplified Credentials Body Example Simplified Credentials Format { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;Leonardo&quot;, &quot;lastName&quot;: &quot;Messi&quot; }, &quot;ssn&quot;: &quot;111111110&quot;, &quot;email&quot;: &quot;leonardo@verified.inc&quot; } ","keywords":"","version":"Next"},{"title":"shared-credentials-body-atomic-details","type":0,"sectionRef":"#","url":"/reusables/shared-credentials-body-atomic-details","content":"shared-credentials-body-atomic-details Example Shared Credentials Body Example Response Body { &quot;uuid&quot;: &quot;d2fc31c3-8174-4e61-ab85-65be6446e8cf&quot;, // the sharedCredentialsUuid &quot;phone&quot;: &quot;+14044327570&quot;, &quot;credentials&quot;: [ { &quot;id&quot;: &quot;8743dce2-b0d3-46bd-a866-7af1b389ff0f&quot;, &quot;createdAt&quot;: &quot;1703101781006&quot;, &quot;updatedAt&quot;: &quot;1703101781006&quot;, &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781005&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;fullName&quot;: &quot;Richard Hendricks&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;53622515-7509-4ed1-9d70-5c3f17c148d9&quot;, &quot;createdAt&quot;: &quot;1703101772943&quot;, &quot;updatedAt&quot;: &quot;1703101772943&quot;, &quot;type&quot;: &quot;PhoneCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101772943&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;phone&quot;: &quot;+14044327070&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;2a9b6f78-eaaf-4526-a131-d919d1a1d0cb&quot;, &quot;createdAt&quot;: &quot;1703101781008&quot;, &quot;updatedAt&quot;: &quot;1703101781008&quot;, &quot;type&quot;: &quot;AddressCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781006&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;address&quot;: &quot;6536 Del Playa Dr, Goleta, US-CA 93117-5117&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;46dc73e8-659e-41f8-be66-f7cedad26bd8&quot;, &quot;createdAt&quot;: &quot;1703101781006&quot;, &quot;updatedAt&quot;: &quot;1703101781006&quot;, &quot;type&quot;: &quot;BirthDateCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781005&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;birthDate&quot;: &quot;721310400000&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; }, { &quot;id&quot;: &quot;e3a55df0-2245-4ec2-ad6a-64ba186a7089&quot;, &quot;createdAt&quot;: &quot;1703101781006&quot;, &quot;updatedAt&quot;: &quot;1703101781006&quot;, &quot;type&quot;: &quot;SsnCredential&quot;, &quot;issuanceDate&quot;: &quot;1703101781005&quot;, &quot;expirationDate&quot;: null, &quot;data&quot;: { &quot;ssn&quot;: &quot;333224444&quot; }, &quot;issuerUuid&quot;: &quot;e1f20210-f8a5-4f88-b760-9e34a6e65d28&quot;, &quot;status&quot;: &quot;valid&quot;, &quot;verificationMethod&quot;: &quot;phone_carrier&quot; } ] } ","keywords":"","version":"Next"},{"title":"Data Schemas","type":0,"sectionRef":"#","url":"/schema","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Data Schemas","url":"/schema#introduction","content":" Verified Inc. enables securely sharing verified  A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credential data amongst network participants. While in theory this data can take any shape, a structured schema must be defined and followed for every credential type for the sake of all network participants.   We use JSON Schema syntax for data validation purposes via a pre-compiled AJV engine. This ensures our credential schemas are robust enough to encapsulate any data while still being easily described, displayed, and validated.  ","version":"Next","tagName":"h2"},{"title":"Schema Definitions​","type":1,"pageTitle":"Data Schemas","url":"/schema#schema-definitions","content":" You can view all of the Verified Inc. defined credential schemas via https://schema-resolver.verified.inc/jsonSchema. If you want to know the schema for a particular credential type you can use that same url with the desired credential type in the path. For example, https://schema-resolver.verified.inc/jsonSchema/EmailCredential, would yield the EmailCredential's schema information.  tip We have this API documented via our public Postman collection documentation under Schema Resolver. It is possible to view the response bodies from https://schema-resolver.verified.inc/jsonSchema in the browser, but we recommend Postman, which automatically formats the JSON response for human readability.  important We hope to soon make it possible for you as a A customer is a company entity that serves as a parent to brands and their corresponding ApiKeys. + More... Example: ACME Bank is the Verified Inc. customer where their self service dashboard access rights are defined. Components: The admins of the customer can manage individual brand settings. customer to define your own credential schemas. But currently, we Verified Inc. define all credential schemas. If you would like a new credential schema for your use case, please let us know and we will gladly define one for you.  We currently support what can be referred to as &quot;single attribute atomic credentials&quot; and &quot;composite credentials&quot;.  Atomic credentials provide users a means of selective disclosure for  A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. request s with optional fields.   Composite credentials are credentials that contain multiple &quot;Atomic Credentials&quot;. For example, the FullNameCredential contains FirstNameCredential, LastNameCredential and MiddleNameCredential. This provides a means of grouping atomic credentials with related data.  JSON Schema​  The /jsonSchema path will return the JSON schema definition, e.g. https://schema-resolver.verified.inc/jsonSchema/FirstNameCredential:  Example FirstNameCredential JSON Schema { &quot;$id&quot;: &quot;FirstNameCredential&quot;, &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;firstName&quot;: { &quot;description&quot;: &quot;A person's first name&quot;, &quot;examples&quot;: [&quot;John&quot;, &quot;Mary Kate&quot;], &quot;title&quot;: &quot;First Name&quot;, &quot;displayFormat&quot;: &quot;String&quot;, &quot;type&quot;: &quot;string&quot; } }, &quot;required&quot;: [&quot;firstName&quot;] }   For composite credential schemas, the object will contain a allOf property, which is an array of the atomic credential schemas:  Example FullNameCredential JSON Schema { &quot;$id&quot;: &quot;FullNameCredential&quot;, &quot;type&quot;: &quot;object&quot;, &quot;allOf&quot;: [ { &quot;$ref&quot;: &quot;FirstNameCredential&quot; }, { &quot;$ref&quot;: &quot;LastNameCredential&quot; }, { &quot;$ref&quot;: &quot;MiddleNameCredential&quot; } ] }   tip Note that each attribute has a description and examples to help you understand the credential's schema. If you need more detailed information, look at our open source schema-sdk formats.  tip The $ref property is a JSON Pointer, which is a string containing a URI fragment identifier. In this case, it is a reference to another schema. This is how we define composite credential schemas.  note It's important to note that each of these credentials inside FullNameCredential are single attribute atomic credentials, so you are able to request individually. But if you need create or request a CityCredential and a StateCredential you will need to use AddressCredential so data doesn't get mismatched.  ","version":"Next","tagName":"h2"},{"title":"Schema Library​","type":1,"pageTitle":"Data Schemas","url":"/schema#schema-library","content":" Search for or select a schema, see its properties and attributes, and copy the schema JSON:    ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Data Schemas","url":"/schema#example","content":" First, we get the JSON schemas for the SsnCredential, FullNameCredential, which contains FirstNameCredential and LastNameCredential and review their attributes' descriptions and examples.  Next, we construct valid credential bodies, according to the schemas:  /*The credential data compliant with the Ssn, FullName (FirstName and LastName) Credentials schemas*/ const credentialsList: Credentials = [ { type: 'SsnCredential', data: { ssn: '333224444', }, }, { type: 'FullNameCredential', data: [ { type: 'FirstNameCredential', data: { firstName: 'John', }, }, { type: 'LastNameCredential', data: { lastName: 'Doe', }, }, ], }, ];   Example Request Body for Issuing Credentials { &quot;credentials&quot;: credentialsList, // a list of one or more Credentials objects &quot;email&quot;: &quot;richard.hendricks@pipedpiper.net&quot; }  ","version":"Next","tagName":"h2"},{"title":"Terminology","type":0,"sectionRef":"#","url":"/terminology","content":"","keywords":"","version":"Next"},{"title":"ID Card​","type":1,"pageTitle":"Terminology","url":"/terminology#id-card","content":" A digital ID card is a collection of A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials issued by a A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand to a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user.  ","version":"Next","tagName":"h2"},{"title":"Credential​","type":1,"pageTitle":"Terminology","url":"/terminology#credential","content":" A credential is a collection of data about a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user. It's issued by a A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand and can be A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. requested by other A customer is a company entity that serves as a parent to brands and their corresponding ApiKeys. + More... Example: ACME Bank is the Verified Inc. customer where their self service dashboard access rights are defined. Components: The admins of the customer can manage individual brand settings. customers, with the A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user's consent.  Example: Hooli and Kredita are  A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brands , and Richard is a  A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user .   Hooli verifies Richard's address and issues a credential of type AddressCredential to him (as part of Issue to Earn).Kredita A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. requests an address credential from Richard (as part of 1-Click Signup).Richard consents to share his address credential with Kredita.  API:  A A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand issues credentials to a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user via POST /credentials.A A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. requests credentials from a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user via POST /1-click.  Credential Data is Stored Securely The data is stored securely using a data privacy vault and is only available to the user and brands the user agrees to share with.  At a high level, a credential contains three pieces of information:  typeuser identifieruser data  The data must match the data schema for the credential type.  ","version":"Next","tagName":"h2"},{"title":"Atomic​","type":1,"pageTitle":"Terminology","url":"/terminology#atomic","content":" Atomic credentials contain single data points. For example, an EmailCredential is an atomic credential that contains an email address.  Some atomic credentials can be contained within composite credentials. For example, FirstNameCredential is an atomic credential that can be contained within the composite FullNameCredential.  Example Atomic EmailCredential { &quot;id&quot;: &quot;8a1d4e35-413d-496b-b499-8810b55cfb5c&quot;, // the credential id &quot;type&quot;: &quot;EmailCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch // the data attribute must match the SsnCredential JSON schema properties as mentioned in the Data Schema section. // i.e. https://schema-resolver.verified.inc/jsonSchema/SsnCredential &quot;data&quot;: { &quot;email&quot;: &quot;test@verified.inc&quot; } }   ","version":"Next","tagName":"h3"},{"title":"Composite​","type":1,"pageTitle":"Terminology","url":"/terminology#composite","content":" Composite credentials are composed of multiple atomic credentials. For example, a FullNameCredential can be composed of a FirstNameCredential and a LastNameCredential. It can also include a MiddleNameCredential.  Example Composite FullNameCredential { &quot;id&quot;: &quot;1be7c008-3f0c-4a21-9aad-69ca1c4251d2&quot;, // the credential id &quot;type&quot;: &quot;FullNameCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch // the data attribute must match the FullNameCredential JSON schema properties as mentioned in the Data Schema section. // i.e. https://schema-resolver.verified.inc/jsonSchema/FullNameCredential &quot;data&quot;: [ { &quot;id&quot;: &quot;2e6a7b9a-e93e-43ba-98a9-c554f4e16457&quot;, // `FirstNameCredential` credential id &quot;type&quot;: &quot;FirstNameCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch &quot;data&quot;: { &quot;firstName&quot;: &quot;Richard&quot; } }, { &quot;id&quot;: &quot;9a5817ef-e621-4277-8c48-c8ee3776b6c4&quot;, // `LastNameCredential` credential id &quot;type&quot;: &quot;LastNameCredential&quot;, // the type of credential &quot;issuer&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, // the brand uuid of the issuer &quot;issuanceDate&quot;: &quot;1671847264479&quot;, // date the credential was issued in milliseconds since unix epoch &quot;expirationDate&quot;: &quot;1871839024044&quot;, // date the credential expires in milliseconds since unix epoch &quot;data&quot;: { &quot;lastName&quot;: &quot;Hendricks&quot; } } ] }   ","version":"Next","tagName":"h3"},{"title":"Request​","type":1,"pageTitle":"Terminology","url":"/terminology#request","content":" A request (or credentials request) is a request for A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials. It's created when a customer successfully checks if a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user has matching credentials, via /hasMatchingCredentials. A request is only created if the user has the type of credentials the customer needs.  Example: Hooli FinTech checks if Richard has a SSN and FullName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the url received in the /hasMatchingCredentials response body.  Components: A customer checks if a user has the needed types of credentials by using /hasMatchingCredentials. If the  A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user does not have the right credentials, then a request is not created. If the user does, a request is created and returned to the customer via the url attribute in the /hasMatchingCredentials response body.   The customer then directs the user to the url, where the user authenticates and agrees to share the relevant data.  At a high level, to create a request, a customer inputs a list containing three pieces of information for each credential which makes up the credentialsRequests atrribute.  type of the credentialacceptable A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand(s) that issued the credentialwhether the credential is required or optional (defaults to required)list of the sub-credentials that make up the credential (optional)  If multiple issuer brands are listed, a credential (of the correct type) from any one of them is acceptable. If none are listed, then any issuer brand is acceptable.  Additionally, the customer must input a user identifier email address and/or phone identifier. You might notice these are the exact inputs to /hasMatchingCredentials.  The full details of the request object aren't that important or helpful to know, as it's completely internal to Verified Inc., but here's an example of a request for a SsnCredential, PhoneCredential and FullNameCredential from the same issuing brand.  { &quot;uuid&quot;: &quot;7c9a2365-a2a3-4fec-b446-99b61a074fa8&quot;, &quot;id&quot;: &quot;854b9889-013d-40a2-93b9-68b9cf8d2540&quot;, &quot;createdAt&quot;: &quot;1673470082199&quot;, &quot;updatedAt&quot;: &quot;1673470082200&quot;, &quot;email&quot;: &quot;test@verified.inc&quot;, &quot;phone&quot;: null, &quot;description&quot;: &quot;Please share the following information:&quot;, &quot;credentialRequests&quot;: [ { &quot;type&quot;: &quot;SsnCredential&quot;, &quot;issuers&quot;: [&quot;d14ca24c-5323-4b79-9dfa-6471b014d68c&quot;], &quot;required&quot;: true, &quot;description&quot;: &quot;We use your social security number for identity verification and tax reporting.&quot; }, { &quot;type&quot;: &quot;PhoneCredential&quot;, &quot;issuers&quot;: [&quot;d14ca24c-5323-4b79-9dfa-6471b014d68c&quot;], &quot;mandatory&quot;: &quot;yes&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuers&quot;: [&quot;d14ca24c-5323-4b79-9dfa-6471b014d68c&quot;], &quot;required&quot;: true, &quot;children&quot;: [ { &quot;type&quot;: &quot;FirstNameCredential&quot;, &quot;issuers&quot;: [&quot;d14ca24c-5323-4b79-9dfa-6471b014d68c&quot;] } ] } ], &quot;expirationDate&quot;: null, &quot;brand&quot;: { &quot;uuid&quot;: &quot;8005c39c-54d7-487e-bf4d-9eb5d39ed795&quot;, &quot;id&quot;: &quot;32ef9562-312d-4a8b-8f3e-ccb8df500b55&quot;, &quot;createdAt&quot;: &quot;1671595963109&quot;, &quot;updatedAt&quot;: &quot;1671595963109&quot;, &quot;issuerName&quot;: &quot;Hooli Issuer&quot;, &quot;receiverName&quot;: &quot;Hooli Receiver&quot;, &quot;cardImageUrl&quot;: &quot;https://VerifiedInc-dev-card-images.s3.us-west-2.amazonaws.com/ID+Card+-+Hooli.svg&quot;, &quot;customerUuid&quot;: &quot;bba94256-5366-4bd5-8e4b-6568be7aaf54&quot; }, &quot;user&quot;: { &quot;uuid&quot;: &quot;77001639-9629-4bad-8d45-4cd0c2b7a7c8&quot;, &quot;id&quot;: &quot;e31de809-ea49-4384-9d3e-6c70d5ff05c7&quot;, &quot;createdAt&quot;: &quot;1671242870669&quot;, &quot;updatedAt&quot;: &quot;1671242870669&quot;, &quot;phoneNumbers&quot;: [&quot;+14043038080&quot;], &quot;emailAddresses&quot;: [&quot;test@verified.inc&quot;] } }   ","version":"Next","tagName":"h2"},{"title":"User​","type":1,"pageTitle":"Terminology","url":"/terminology#user","content":" A user is an individual in the Verified Inc. network that can share verified identity data (via A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials). Each user has at least one phone number or email address associated with them. They can have multiple of either.  note Users can be referenced by email and/or phone, identifiers that you already have for your own user accounts. This prevents you from needing to use Verified Inc. specific user IDs.  Example: Richard is a user in your account system and potentially a user in the Verified Inc. network. You have two email addresses and one phone number for him. You can use any of these identifiers to issue credentials to him or check if he has matching credentials.  Components: You can issue credentials using /credentials and check for matching credentials with /hasMatchingCredentials.  { &quot;id&quot;: &quot;e31de809-ea49-4384-9d3e-6c70d5ff05c7&quot;, &quot;createdAt&quot;: &quot;1671242870669&quot;, &quot;updatedAt&quot;: &quot;1671242870669&quot;, &quot;emailAddresses&quot;: [&quot;test@verified.inc&quot;], &quot;phoneNumbers&quot;: [] }   ","version":"Next","tagName":"h2"},{"title":"User Identifier​","type":1,"pageTitle":"Terminology","url":"/terminology#user-identifier","content":" A userIdentifier is a value used to refer to an user. Due to the ubiquitous nature of phone and/or email values being associated with users we have adopted to this term to refer to either of these values.  note A user can have many userIdentifiers of email and phones.  Example: richard@pipedpiper.net is one of Richard Hendrick's user identifiers. He also has a phone number of +10123456789, another one of his user identifiers.  Components: We have abstracted away the complexity of dealing with a third party uuid to refer to a user. Instead, you can use the user's email or phone number to refer to and issue credentials to users in our system.  ","version":"Next","tagName":"h2"},{"title":"Brand​","type":1,"pageTitle":"Terminology","url":"/terminology#brand","content":" A brand is a customer entity that has a corresponding unique API key, name, and ID card image. Brands can issue, request and receive credentials to and from users.  note A customer can have one to many brands. A brand can be assoicated with only one customer.  Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique API key, name, and ID card image.  Components: Each brand has an associated parent customer. A customer can have one or more brands.  ","version":"Next","tagName":"h2"},{"title":"Customer​","type":1,"pageTitle":"Terminology","url":"/terminology#customer","content":" A customer serves as a parent to brands and their corresponding API keys.  info Our self service Dashboard is coming soon. It will allow you authenticate as a customer and create and manage your A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brands.  note Throughout our docs we use verbiage similar to a &quot;customer must make an api request&quot; or &quot;a customer must check credentials&quot; however we are actually referring to a &quot;brand&quot;. This is because a brand is the entity that has a unique API key. So when we say &quot;customer&quot; we technically mean a customer using one of its brand API keys.  Example: ACME Bank is an Verified Inc. customer and has two brands: ACME Lending and ACME Savings.  Components: The admins of the customer can manage individual  A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand settings.  ","version":"Next","tagName":"h2"},{"title":"1-Click Signup","type":0,"sectionRef":"#","url":"/","content":"","keywords":"","version":"Next"},{"title":"How It Works​","type":1,"pageTitle":"1-Click Signup","url":"/#how-it-works","content":" ","version":"Next","tagName":"h2"},{"title":"User Experience​","type":1,"pageTitle":"1-Click Signup","url":"/#user-experience","content":" Try our 1-Click Signup demos to see this user experience in action.  1-Click Signup can take less than 10 seconds for a user to complete. It usually takes around 20-30 seconds.  The user experience is simple:  Enter phone numberReceive SMS with verification link/codeClick link or enter code(only if first time) Enter DOB/SSN4Review and consent to share data  Step 4 Happens Only On First Time Use If it's the user's first time using 1-Click Signup, they'll need to enter their date of birth (DOB) or the last 4 digits of their Social Security Number (SSN4). This is for additional verification.If it's not the user's first time, this step will be skipped.  Without Redirect vs. With Redirect You can choose whether you redirect the user or not as part of the flow: In the simplest implementation, you don't redirect the user and they click a verification link in the SMS.Instead, you can (optionally) redirect the user (to a URL we provide), so they can enter a verification code from the SMS. Both of these approaches work well but have their pros and cons.  ","version":"Next","tagName":"h3"},{"title":"Flow Diagram​","type":1,"pageTitle":"1-Click Signup","url":"/#flow-diagram","content":" Think of 1-Click Signup as a black box, where the input is a phone number and the output is verified user data:  Black BoxPartial DetailFull Detail You send us a phone number, and we send you verified user data, with full user consent. Yes, it's really that simple!  ","version":"Next","tagName":"h3"},{"title":"Sequence Diagram​","type":1,"pageTitle":"1-Click Signup","url":"/#full-sequence-diagram","content":" Here's the full flow:  DevelopmentProduction To assist getting up and running during development in our Sandbox environment, we handle sending the SMS for you by default. However, part of our go live process is to switch this over to you sending the SMS as shown in the Production sequence diagram.  ","version":"Next","tagName":"h3"},{"title":"Implement​","type":1,"pageTitle":"1-Click Signup","url":"/#implement","content":" Try our 1-Click Signup demos to see example implementations. These are open source, so feel free to use the source code as a reference.  ","version":"Next","tagName":"h2"},{"title":"3 Steps to Implement​","type":1,"pageTitle":"1-Click Signup","url":"/#3-steps-to-implement","content":" To implement 1-Click Signup, there are only 3 steps (and one is optional):  Call 1-Click endpoint(optional) Redirect userReceive user data  See the sequence diagram above.  Sandbox Testing To test in our sandbox environment, you can use our test brand and user: Test Brand API Credentials Sandbox API Key yVg3LEnF08y0MDmpHcPxB+sZWFcDARmPRKdY2M906ng= Sandbox URL https://core-api.sandbox-verifiedinc.com To get an API key for your own brand, email us at Support@Verified.Inc. Test User Login Credentials Phone +10123456789 Email richard@piedpiper.net Verification Code 111111 These are Hooli and Richard Hendricks — yes, the ones from Silicon Valley! 😂  tip We also strongly recommend that you test using your own phone number. This will allow you to receive SMS messages, which are necessary to test the full 1-Click Signup flow (but won't work for the test user). Phone Number Format Make sure to use a 10-digit string, with the +1 country code at the beginning: Phone +10123456789 Currently, only US phone numbers work with 1-Click Signup (and we're able to source verified data for 95% of these numbers). Using your own phone number in sandbox, you'll receive dummy user data.  Simplest Implementation​  For the simplest implementation:  Call 1-Click endpoint with a basic requestRedirect user (skip optional step)Receive user data using the pull option  ","version":"Next","tagName":"h3"},{"title":"1. Call 1-Click Endpoint​","type":1,"pageTitle":"1-Click Signup","url":"/#call-1-click-endpoint","content":" The 1-Click endpoint is POST /1-click. Call it with the user's phone number to start 1-Click Signup.  Sequence Diagram​    ↑ Full Sequence Diagram  Basic Request​  Just include a phone number:  POST /1-click Request Body { &quot;phone&quot;: &quot;+10123456789&quot; }   Advanced Request​  You can also use /1-click in more advanced ways:  Optimize for Redirect If you're going to redirect the user to us (which is optional), you should add&quot;verificationOptions&quot;: &quot;only_code&quot; to the request body: POST /1-click Request Body { &quot;phone&quot;: &quot;+10123456789&quot;, &quot;verificationOptions&quot;: &quot;only_code&quot; } This makes the SMS body contain a verification code rather than a link, which can cause confusion. You can also use &quot;verificationOptions&quot;: &quot;both_link_and_code&quot; to make the SMS contain both a verification link and code. This gives the user the option of using either one.  Change the Word After &quot;1-Click&quot; If &quot;1-Click Signup&quot; isn't the best phrase for your use case, you can change the last word to &quot;Verify&quot; or &quot;Apply&quot;&quot; like this: POST /1-click Request Body { &quot;phone&quot;: &quot;+10123456789&quot;, &quot;content&quot;: { &quot;title&quot;: &quot;Verify&quot; } } If neither of these is ideal for you, reach out to us about what would be better, and we'll gladly consider adding more options.  Define a Redirect URL When we create an API key for your brand — email us at Support@Verified.Inc if you need one — we define a default redirect URL. This is where we will redirect the user after they consent (or decline) to share data with you. It's &quot;global&quot; to your brand in the sense that it applies to any 1-Click Signup flow you initiate. However, you can also define a redirect URL &quot;on the fly&quot; that applies only to the specific 1-Click Signup flow you just initiated. To do this, just include the optional redirectUrl attribute: POST /1-click Request Body { &quot;phone&quot;: &quot;+10123456789&quot;, &quot;redirectUrl&quot;: &quot;https://example.com&quot; } This overrides the default redirect URL for your brand.  Change Data Types Requested If you only need a subset of the verified user data we can return, you can limit the data types requested like this: POST /1-click Request Body { &quot;phone&quot;: &quot;+10123456789&quot;, &quot;credentialRequests&quot;: [ &quot;FullNameCredential&quot;, &quot;EmailCredential&quot;, &quot;PhoneCredential&quot;, &quot;AddressCredential&quot; ] } The default types are: FullNameCredentialEmailCredentialPhoneCredentialAddressCredentialBirthDateCredentialSsnCredential You can also request additional data types — EmployerNameCredential, AnnualIncomeCredential, and many more. See the full list of available types in our schema library warning We aren't always able to source data for types beyond the defaults listed above. If we aren't able to, we allow the user to input data in a simple form interface. We're soon adding more data sources, so we'll be able to expand the default types over time.  Fully Customize Data Request You can fully customize the data request, controlling things like: whether user input is allowedwhether a given piece of data is required or optionalwhich issuers issued the verified data We are happy to help you customize this. Just email us at Support@Verified.Inc if you'd like help doing so. Here's an example of a fully customized request: POST /1-click Request Body { &quot;phone&quot;: &quot;+10123456789&quot;, &quot;credentialRequests&quot;: [ { &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuers&quot;: [&quot;{{verifiedIncIssuerBrandUuid}}&quot;], &quot;allowUserInput&quot;: true, &quot;mandatory&quot;: &quot;if_available&quot;, &quot;description&quot;: &quot;Your full legal name&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;FirstNameCredential&quot; }, { &quot;type&quot;: &quot;LastNameCredential&quot; } ] }, { &quot;type&quot;: &quot;EmailCredential&quot;, &quot;issuers&quot;: [&quot;{{verifiedIncIssuerBrandUuid}}&quot;], &quot;allowUserInput&quot;: true, &quot;mandatory&quot;: &quot;if_available&quot; }, { &quot;type&quot;: &quot;PhoneCredential&quot;, &quot;issuers&quot;: [&quot;{{verifiedIncIssuerBrandUuid}}&quot;], &quot;mandatory&quot;: &quot;yes&quot;, &quot;description&quot;: &quot;We only send important account updates, never spam&quot; }, { &quot;type&quot;: &quot;AddressCredential&quot;, &quot;issuers&quot;: [&quot;{{verifiedIncIssuerBrandUuid}}&quot;], &quot;allowUserInput&quot;: true, &quot;mandatory&quot;: &quot;if_available&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;Line1Credential&quot; }, { &quot;type&quot;: &quot;Line2Credential&quot;, &quot;mandatory&quot;: no }, { &quot;type&quot;: &quot;CityCredential&quot; }, { &quot;type&quot;: &quot;StateCredential&quot; }, { &quot;type&quot;: &quot;CountryCredential&quot; }, { &quot;type&quot;: &quot;ZipCodeCredential&quot; } ] }, ] }   Response​  If 1-Click Signup is possible for the phone number included in the request body, the response body will contain a URL and a boolean indicating whether the phone number matches a user in our system.  POST /1-click Response Body { &quot;url&quot;: &quot;https://wallet.verified.inc/request/9f2053fc-cc4c-41cb-8d14-7d3ccf6167eb&quot;, &quot;match&quot;: true, &quot;smsBody&quot;: &quot;Click this link to verify for Hooli: https://wallet.verified.inc/mt/3070e04e-dfdd-4600-954a-6ddaf651c65c&quot; // only necessary to use in production, where you send the SMS }   If you are going to redirect the user (which is optional), you should redirect them to the returned url. If you aren't going to redirect them, you can ignore this URL.  If 1-Click Signup is not possible, the response body match value will be false or contain an error.  You can ignore smsBody in sandbox, where we handle sending SMS for you to make it simpler to start integrating. But when you're ready to go live, where you will send the SMS, you should trigger and SMS to the user that contains smsBody.  ","version":"Next","tagName":"h3"},{"title":"2. (optional) Redirect User​","type":1,"pageTitle":"1-Click Signup","url":"/#redirect-user","content":" Optionally, you can redirect the user to the URL contained in the 1-Click endpoint response. This is a link to our Wallet, where the user will review and consent to share their verified data.  Redirecting the User Is Not Necessary They will end up at our Wallet either way: If you do not redirect the user, they will click a verification link in the SMS that takes them to the Wallet.If you do redirect the user, that will take them to the Wallet, where they will enter a verification code. See below for the pros and cons of these two approaches.  Sequence Diagram​    ↑ Full Sequence Diagram  Pros and Cons​  There are pros and cons to redirecting the user:  Pros It allows the user to enter a verification code. This can usually be done without switching to the messages app because of autofill features in mobile operating systems. (Clicking a verification link in the SMS requires switching to the messages app.)It allows you to keep the user in the same context. If they start in a particular browser, by redirecting you can ensure they stay in that browser. (If they click the link, the mobile operating system may open it in a different browser.) If they start in a mobile app, you can open a webview within that app so they aren't taken away from it. (We recommend a full page webview, so it feels like part of the app.)  Cons It's not ideal on non-mobile devices. That's because ultimately the user has to verify on their mobile device — it's what allows us to pull verified data from the user's wireless phone provider. So if you redirect the user on a non-mobile device, our Wallet will display a QR code to direct them to their phone, which works but is not the best experience. Therefore, we recommend that if you redirect the user at all that you first check if they're on a mobile device and only do the redirect in that case.It's slightly more work to implement. The simplest implementation is not redirecting the user.  ","version":"Next","tagName":"h3"},{"title":"3. Receive User Data​","type":1,"pageTitle":"1-Click Signup","url":"/#receive-user-data","content":" After you call the 1-Click endpoint, you need to be set up to receive data the user consents to share with you.  There are two options for how to do this:  Push Option (recommended): We push the data to you, by hitting an endpoint you provide.  OR  Pull Option: You pull the data from us, by hitting an endpoint we provide.  We Recommend the Push Option We recommend the push option because you are guaranteed to receive the data immediately, as soon as the user consents to share it. That results in 100% conversion. With the pull option, there's a time delay between when the user consents to share and when you are able to pull the data. That's because we have to redirect the user to you first. Conversion is generally somewhat less than 100% in this case.  Sequence Diagram​    ↑ Full Sequence Diagram  Push Option (recommended)​  All you need to do is create a webhook called POST /verified/credentials according to our OpenAPI spec. This is where we will send verified user data when a user consents to share it.    ↑ Full Sequence Diagram  Pull Option​  Here's how this option works:  We redirect to your redirectUrl and include a URL parameter called 1ClickUuid.You call our GET /1-click endpoint with the value of this parameter.  Sequence Diagram​    ↑ Full Sequence Diagram  Response​  The user data you'll receive is the same, regardless of whether you use the push or pull option.  tip One particularly valuable piece of metadata is verificationMethod, which describes how the credential (piece of user data) was verified. It can take the following values: &quot;phone_carrier&quot;: verified via phone carrier records&quot;otp&quot;: verified via an OTP (one time passcode)&quot;self_attested&quot;: attested by the user themselves (not verified)null  Definitions An identifier is a phone number or email address the user uses to verify for 1-Click Signup. identifierType is the type of identifier (phone or email). A credential is a piece of data the user shares (e.g. birth date or SSN). A credential type is a string indicating the type of a credential (e.g. SsnCredential or FirstNameCredential). It's formatted in PascalCase and always includes the word Credential at the end. shortenedCredentialType is the shortened credential type in camelCase. The shortened credential type is just the type without the word Credential (e.g. birthDate or ssn). For subcredentials of a composite credential, it includes the shortened credential type of its parent credential(s) (e.g. fullName.firstName). Accepted Values Currently, accepted values for shortenedCredentialType are: emailfullName.firstNamefullName.middleNamefullName.lastNamebirthDateaddress.line1address.line2address.cityaddress.stateaddress.zipCodeaddress.countryssn Data in this context means identity information about a user (e.g. their name, contact information, etc.)Metadata in this context means any additional data that's not identity information about a user (e.g. the verification method for their identity information). metadataType is the type of metadata. Accepted Values Currently, possible values for metadataType are: id: unique identifier for a credential UUIDApplies only to credentials verificationMethod: how an identifier or credential was verified enum: &quot;phone_carrier&quot;, &quot;otp&quot;, &quot;self_attested&quot;, or nullApplies to both identifiers and credentials status: status of a credential enum: &quot;valid&quot; or &quot;revoked&quot;Applies only to credentials issuerUuid: brand that issued a credential UUIDApplies only to credentials issuanceDate: date a credential was issued Unix timestampApplies only to credentials expirationDate: date a credential expires Unix timestampApplies only to credentials  Data the User Shared { &quot;identifiers&quot;: { &quot;phone&quot;: &quot;+10123456789&quot; }, &quot;credentials&quot;: { &quot;email&quot;: &quot;richard@piedpiper.net&quot;, &quot;fullName&quot;: { &quot;firstName&quot;: &quot;Richard&quot;, &quot;lastName&quot;: &quot;Hendricks&quot; }, &quot;birthDate&quot;: &quot;08/01/1989&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;5320 Newell Rd&quot;, &quot;city&quot;: &quot;Palo Alto&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;zip&quot;: &quot;94303&quot;, &quot;country&quot;: &quot;US&quot; }, &quot;ssn&quot;: &quot;123456789&quot; }, &quot;metadata&quot;: { &quot;identifiers&quot;: { &quot;verificationMethod&quot;: { &quot;phone&quot;: &quot;phone_carrier&quot; } }, &quot;credentials&quot;: { &quot;id&quot;: { &quot;email&quot;: &quot;8a1d4e35-413d-496b-b499-8810b55cfb5c&quot;, &quot;fullName&quot;: { &quot;firstName&quot;: &quot;2e6a7b9a-e93e-43ba-98a9-c554f4e16457&quot;, &quot;lastName&quot;: &quot;9a5817ef-e621-4277-8c48-c8ee3776b6c4&quot; }, &quot;birthDate&quot;: &quot;ec1ef0ce-eeed-46a4-94a9-29b46e64403d&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;f5a4dc93-bc06-4bb8-bd05-17b5ba912bcd&quot;, &quot;city&quot;: &quot;efd3820f-676a-4db1-b63e-695b66ed8ba0&quot;, &quot;state&quot;: &quot;b65022a2-2016-41df-88f3-252e8e3a29c5&quot;, &quot;zip&quot;: &quot;b747ff84-39d8-4df9-98f9-24a465f1a9ae&quot;, &quot;country&quot;: &quot;d57a7bca-2a7c-4671-86ad-5647731cad02&quot; }, &quot;ssn&quot;: &quot;ec1ef0ce-eeed-46a4-94a9-29b46e64403d&quot; }, &quot;verificationMethod&quot;: { &quot;email&quot;: &quot;phone_carrier&quot;, &quot;fullName&quot;: { &quot;firstName&quot;: &quot;phone_carrier&quot;, &quot;lastName&quot;: &quot;phone_carrier&quot; }, &quot;birthDate&quot;: &quot;phone_carrier&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;phone_carrier&quot;, &quot;city&quot;: &quot;phone_carrier&quot;, &quot;state&quot;: &quot;phone_carrier&quot;, &quot;zip&quot;: &quot;phone_carrier&quot;, &quot;country&quot;: &quot;phone_carrier&quot; }, &quot;ssn&quot;: &quot;phone_carrier&quot; }, &quot;status&quot;: { &quot;email&quot;: &quot;valid&quot;, &quot;fullName&quot;: { &quot;firstName&quot;: &quot;valid&quot;, &quot;lastName&quot;: &quot;valid&quot; }, &quot;birthDate&quot;: &quot;valid&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;valid&quot;, &quot;city&quot;: &quot;valid&quot;, &quot;state&quot;: &quot;valid&quot;, &quot;zip&quot;: &quot;valid&quot;, &quot;country&quot;: &quot;valid&quot; }, &quot;ssn&quot;: &quot;valid&quot; }, &quot;issuerUuid&quot;: { &quot;email&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;fullName&quot;: { &quot;firstName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;lastName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;birthDate&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;city&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;state&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;zip&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;country&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;ssn&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;issuanceDate&quot;: { &quot;email&quot;: &quot;1671847264479&quot;, &quot;fullName&quot;: { &quot;firstName&quot;: &quot;1671847264479&quot;, &quot;lastName&quot;: &quot;1671847264479&quot; }, &quot;birthDate&quot;: &quot;1671847264479&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1671847264479&quot;, &quot;city&quot;: &quot;1671847264479&quot;, &quot;state&quot;: &quot;1671847264479&quot;, &quot;zip&quot;: &quot;1671847264479&quot;, &quot;country&quot;: &quot;1671847264479&quot; }, &quot;ssn&quot;: &quot;1671847264479&quot; }, &quot;expirationDate&quot;: { &quot;email&quot;: &quot;1871839024044&quot;, &quot;fullName&quot;: { &quot;firstName&quot;: &quot;1871839024044&quot;, &quot;lastName&quot;: &quot;1871839024044&quot; }, &quot;birthDate&quot;: &quot;1871839024044&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1871839024044&quot;, &quot;city&quot;: &quot;1871839024044&quot;, &quot;state&quot;: &quot;1871839024044&quot;, &quot;zip&quot;: &quot;1871839024044&quot;, &quot;country&quot;: &quot;1871839024044&quot; }, &quot;ssn&quot;: &quot;1871839024044&quot; } } } }   ","version":"Next","tagName":"h3"},{"title":"Go Live!​","type":1,"pageTitle":"1-Click Signup","url":"/#go-live","content":" Before you launch 1-Click Signup live in production, you'll need to do 2 things that are not necessary in sandbox:  Add legal language to ensure compliance: SMS regulations require that users give informed consent, so you must include the following language just above or below the phone number input you use to start the 1-Click Signup flow. (It can be included alongside other legal language you already use.) By {taking this action}, you agree to receive a text to create a Verified Inc. account for 1-Click Signup at {your brand name} and other supported sites. Replace {taking this action} and {your brand name} Replace {taking this action} with the action the user takes to trigger the 1-Click Signup flow. For example: If your implementation automatically calls POST /1-click when the user enters a valid phone number, replace {taking this action} with &quot;entering your phone number&quot;. If your implementation calls POST /1-click when the user clicks a Next button after entering their phone number, replace {taking this action} with &quot;clicking Next&quot;. If there are multiple possible triggers, replace {taking this action} with &quot;continuing&quot; so it's general enough to cover all cases. Replace {your brand name} with your brand name. Here's a full example, with these replacements: By entering your phone number, you agree to receive a text to create a Verified Inc. account for 1-Click Signup at Hooli and other supported sites. Optionally include a &quot;powered by&quot; graphic We encourage (but don't require) you to include a graphic that says &quot;1-Click Signup powered by Verified Inc.&quot; This helps the user understand they're about to go through a 1-Click Signup flow — and motivates them to do so, since a 1-click experience is always best! The graphic should be placed just below the phone number input you use to start the 1-Click Signup flow. We provide several variants of the graphic, in both SVG and PNG format. Choose the one you prefer and that best fits the background color of your application. Green Download SVG |Download PNG Black Download SVG |Download PNG Gray Download SVG |Download PNG White Download SVG |Download PNG Here's an example: Hooli displays the required legal language and includes the gray variant of the &quot;powered by&quot; graphic. Send SMS: When you're ready to go live, we'll enable POST /1-click to return one additional attribute, smsBody, which contains the content of the SMS the user should receive. It's not necessary for you to send SMS in sandbox — we handle it for you to make it easier to get started — but you should do so in production. This is to avoid user confusion (so all SMS you send come from the same number) and ensure compliance with recent regulations about informed consent for SMS.  Production Ready Checklist​    You've included the required legal language.      You're set up to send SMS to users.      You've tested the 1-Click Signup flow end-to-end.      Once we've confirmed that you've checked off these items, you're ready to go live!  ","version":"Next","tagName":"h3"},{"title":"Non-Hosted Variant​","type":1,"pageTitle":"1-Click Signup","url":"/#non-hosted-variant","content":" The 1-Click Signup experience mentioned above outlines our &quot;hosted&quot; 1-Click Signup flow, where the user interacts with our Wallet. We also offer a non-hosted or &quot;headless&quot; 1-Click Signup flow, which allows for a more white-label integration where the user will never have to leave your signup flow. You will receive the data as soon the user clicks the verification link in the SMS or enters the verification code via your UI (and a headless redirect is initiated to us, more on that below).  This method requires additional work; mainly, you will have to build a UI for the user to interact with. However, often, this is just augmenting your existing signup forms. While the rest is very similar to the hosted flow, there are a few differences:  Call /1-click with two additional request attributes: isHosted and birthDate. POST /1-click Request Body (Non-Hosted Additional Attributes) isHosted: false, birthDate: &quot;YYYY-MM-DD&quot;, The birthDate value often must come from signup forms. We recommend collecting this alongside their phone number. Regardless of your method of receiving the data (push or pull), the data provided ought to be prefilled in your existing signup forms. This is to allow the user to edit any fields that may have been incorrect or add any additional information that may be required. It is necessary to allow the user to edit the data for correctness. Also, the response body may contain multiple credentials of the same type (e.g., addresses), and you will need to handle this in your UI. The simplest solution is to provide the most recently issued credential field and have them edit it if necessary. If using verificationOptions containing a code, you will need to build the input for the user to submit the OTP code sent to them via SMS. This only needs to be handled if you are using verificationOptions set to only_code or both_link_and_code. Upon collecting the verification code from the user, you must redirect the user to the /1-click response body's url with the user-provided verification code as a query parameter. Below is an example response body: Example URL Response Body { &quot;url&quot;: &quot;https://wallet.verified.inc/signin/verify/generic?phone=%2B101234566789&amp;phoneCarrier=true&amp;requestId=242189ee-c120-4f62-af85-a0a19423ffc0&amp;issuePhoneCarrierCredentials=false&amp;isHosted=false&quot;, &quot;match&quot;: true, &quot;uuid&quot;: &quot;242189ee-c120-4f62-af85-a0a19423ffc0&quot; } The resultant URL that you need to redirect to would look like this: Redirect URL Post User Inputted OTP Code https://wallet.verified.inc/signin/verify/generic?code=123456&amp;phone=%2B10123456789&amp;phoneCarrier=true&amp;requestId=242189ee-c120-4f62-af85-a0a19423ffc0&amp;issuePhoneCarrierCredentials=false&amp;isHosted=false This redirect will ultimately land the user back on your defined redirectUrl with no user interaction appearing as if only a page refresh has occurred. If using verificationOptions only_link then the /1-click response body will not contain a url even if match is true. This is because there is no need to redirect the user. Thanks to the verification link sent via SMS already containing the code, there is no need for a redirect. Upon clicking the link, we will redirect the user to your defined redirectUrl upon phone verification and credential creation happening in a headless manner.  ","version":"Next","tagName":"h2"},{"title":"Diagram​","type":1,"pageTitle":"1-Click Signup","url":"/#non-hosted-variant-diagram","content":"   Please note that, just as in the hosted flow, Verified Inc. will send the SMS on your behalf in sandbox, but you will need send the SMS in production (the same go live checklist applies).  ","version":"Next","tagName":"h3"},{"title":"Trusted Variant​","type":1,"pageTitle":"1-Click Signup","url":"/#trusted-variant","content":" The /1-click/trusted flow is in many ways similar to the non-hosted flow documented above, but it does not require your brand to use the OTP provided by the /1-click non-hosted response body. This variant is most appropriate for organizations that already use a phone authentication solution. As the name implies, it requires additional verification by Verified Inc. during the integration's development to ensure that phone possession is checked, often via a SMS one-time passcode, during the current user session prior to calling this endpoint.  The notable differences between the trusted and non-hosted variants are:  The endpoint is /1-click/trusted not /1-click. This endpoint's request body resembles /1-click's but the response body does not. Example 1-Click User Data Response Body Example 1-click/trusted Response Body { &quot;uuid&quot;: &quot;5ed9eb5a-91d0-4beb-8fbd-7f8ddf594f23&quot;, &quot;identifiers&quot;: { &quot;phone&quot;: &quot;+14044327575&quot; }, &quot;credentials&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;Ray&quot;, &quot;lastName&quot;: &quot;Smets&quot; }, &quot;email&quot;: &quot;ray@verified.inc&quot;, &quot;phone&quot;: &quot;+14044321313&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1133 Broderick St&quot;, &quot;city&quot;: &quot;San Francisco&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;country&quot;: &quot;US&quot;, &quot;zipCode&quot;: &quot;94115&quot; }, &quot;birthDate&quot;: &quot;695131200000&quot;, &quot;ssn&quot;: &quot;111111900&quot; }, &quot;metadata&quot;: { &quot;id&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;2edb642b-d8d4-4be3-8904-689027896865&quot;, &quot;lastName&quot;: &quot;42018960-9d8c-4db9-bd14-113440716830&quot; }, &quot;email&quot;: &quot;dcab38ca-ff23-497f-bb6f-d886d60518e6&quot;, &quot;phone&quot;: &quot;2b07771c-eaf7-41ca-9761-df4463f166cc&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;e19c0b18-c18d-4e1b-b40f-f8b4804b33b0&quot;, &quot;city&quot;: &quot;7114ec91-e1cd-45a4-a78c-0de581a554a2&quot;, &quot;state&quot;: &quot;de8a0522-4ad7-477d-85d9-f16e8672e8e6&quot;, &quot;country&quot;: &quot;79e27322-ffcf-4cb3-b13b-acc2805596d5&quot;, &quot;zipCode&quot;: &quot;89ff5570-3539-463a-9be7-5780bfb7ce72&quot; }, &quot;birthDate&quot;: &quot;6ac7a777-b1ff-4a65-9999-06b4090159bc&quot;, &quot;ssn&quot;: &quot;3731d919-e66c-4e5e-9095-85d0da5b6462&quot; }, &quot;verificationMethod&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;phone_carrier&quot;, &quot;lastName&quot;: &quot;phone_carrier&quot; }, &quot;email&quot;: &quot;phone_carrier&quot;, &quot;phone&quot;: &quot;phone_carrier&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;phone_carrier&quot;, &quot;city&quot;: &quot;phone_carrier&quot;, &quot;state&quot;: &quot;phone_carrier&quot;, &quot;country&quot;: &quot;phone_carrier&quot;, &quot;zipCode&quot;: &quot;phone_carrier&quot; }, &quot;birthDate&quot;: &quot;phone_carrier&quot;, &quot;ssn&quot;: &quot;phone_carrier&quot; }, &quot;status&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;valid&quot;, &quot;lastName&quot;: &quot;valid&quot; }, &quot;email&quot;: &quot;valid&quot;, &quot;phone&quot;: &quot;valid&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;valid&quot;, &quot;city&quot;: &quot;valid&quot;, &quot;state&quot;: &quot;valid&quot;, &quot;country&quot;: &quot;valid&quot;, &quot;zipCode&quot;: &quot;valid&quot; }, &quot;birthDate&quot;: &quot;valid&quot;, &quot;ssn&quot;: &quot;valid&quot; }, &quot;expirationDate&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: null, &quot;lastName&quot;: null }, &quot;email&quot;: null, &quot;phone&quot;: null, &quot;address&quot;: { &quot;line1&quot;: null, &quot;city&quot;: null, &quot;state&quot;: null, &quot;country&quot;: null, &quot;zipCode&quot;: null }, &quot;birthDate&quot;: null, &quot;ssn&quot;: null }, &quot;issuanceDate&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;1708796694877&quot;, &quot;lastName&quot;: &quot;1708796694877&quot; }, &quot;email&quot;: &quot;1708796694883&quot;, &quot;phone&quot;: &quot;1708761085382&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;1708796694883&quot;, &quot;city&quot;: &quot;1708796694883&quot;, &quot;state&quot;: &quot;1708796694883&quot;, &quot;country&quot;: &quot;1708796694883&quot;, &quot;zipCode&quot;: &quot;1708796694883&quot; }, &quot;birthDate&quot;: &quot;1708796694877&quot;, &quot;ssn&quot;: &quot;1708796694877&quot; }, &quot;issuerUuid&quot;: { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;lastName&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;email&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;phone&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;address&quot;: { &quot;line1&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;city&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;state&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;country&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;zipCode&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;birthDate&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot;, &quot;ssn&quot;: &quot;c3be0124-8f03-4983-baef-3302e0be88f4&quot; }, &quot;identifiers&quot;: { &quot;verificationMethod&quot;: { &quot;phone&quot;: null, &quot;email&quot;: null } } } } 1-click credential data is return synchronously by this endpoint. In the non-hosted /1-click flow, you need to send the OTP back to us once you've received it from the user, and we pass back the user's data asynchronously via methods documented in the receive user data section above.  If you're interested in this type of integration, please let us know and we will enable it for your API key. Please note that we will have to validate your integration in sandbox prior to sharing production access to this feature.  ","version":"Next","tagName":"h2"},{"title":"Diagram​","type":1,"pageTitle":"1-Click Signup","url":"/#trusted-variant-diagram","content":" ","version":"Next","tagName":"h3"},{"title":"API Reference","type":0,"sectionRef":"#","url":"/api-reference","content":"","keywords":"","version":"Next"},{"title":"Authentication​","type":1,"pageTitle":"API Reference","url":"/api-reference#authentication","content":" Every request detailed below requires an Verified Inc. API key as an Authorization header value.  Sandbox Testing To test in our sandbox environment, you can use our test brand and user: Test Brand API Credentials Sandbox API Key yVg3LEnF08y0MDmpHcPxB+sZWFcDARmPRKdY2M906ng= Sandbox URL https://core-api.sandbox-verifiedinc.com To get an API key for your own brand, email us at Support@Verified.Inc. Test User Login Credentials Phone +10123456789 Email richard@piedpiper.net Verification Code 111111 These are Hooli and Richard Hendricks — yes, the ones from Silicon Valley! 😂  caution API keys are sensitive, so please only use them in a secure backend service environment. This means that ideally your clients will communicate with your own backend service, which will then call the Verified Inc. API. Your clients should never have direct access to your Verified Inc. API key.  ","version":"Next","tagName":"h3"},{"title":"Environments​","type":1,"pageTitle":"API Reference","url":"/api-reference#environments","content":" We have two environments. Please do all integration against the sandbox environment.  Environment\tBase URL\tWallet URLSandbox\thttps://core-api.sandbox-verifiedinc.com\thttps://wallet.sandbox-verifiedinc.com Production\thttps://core-api.verified.inc\thttps://wallet.verified.inc  note The sandbox domain is sandbox-verifiedinc.com but the production domain is verified.inc. This is purely because .inc domains are quite expensive!  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"API Reference","url":"/api-reference#development","content":" While developing your integration you can use a dummy user account if you would like.  email: richard@piedpiper.net || richard.hendricks@verified.inc phone: +10123456789 || +550123456789   By using these test identifiers you can authenticate to the wallet using a static OTP value of 111111, allowing you to test the full flow of the integration more easily. We recommend using a proper test email or phone to recieve actual verification messages during the final stages of development.  caution Credentials issued to the test user will be deleted every day at 05:00 UTC.  ","version":"Next","tagName":"h3"},{"title":"Core Functionality​","type":1,"pageTitle":"API Reference","url":"/api-reference#core-functionality","content":" The core functionality of our API allows your brand to participate in the Verified Network through 1-Click Signup. For more advanced use cases like Issue to Earn, please refer to our advanced API section.    ","version":"Next","tagName":"h2"},{"title":"1-Click​","type":1,"pageTitle":"API Reference","url":"/api-reference#1-click","content":" Begin a 1-Click Signup flow, so a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user can easily share their verified A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials.  Method: POST Path: /1-click  You need to provide:  User's phone(Optional) User's email.(Optional) Verification option(s). Controls the SMS verification messaging.(Optional) Content object of request page options. To allow for minor messaging adjustments to the Wallet request page from which the user provides consent to share data.(Optional) Credential request(s). (if you would like to deviate from the default credential requests).(Optional) Redirect URL. If you would like to redirect the user to a different URL than the one provided in your settings.(Optional) isHosted. If you would like to do the non-hosted integration .(Optional) User's birthDate. Only required if you are using the non-hosted integration.  A credential requests encodes which  A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials you're asking the user to share with your A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand . It's a list of one or more CredentialRequest objects.   CredentialRequest { type: string, // the type of credential data being requested issuers: string[], // list of acceptable brandIds; if empty, all issuer brands are valid required?: boolean, // @deprecated - Use mandatory field instead. If the credential is required mandatory?: 'yes' | 'no' | 'if_available' // if the credential is required, not required, or required if available. description?: string // a description field that is shown to the user; can be used to explain why the information is being requested allowUserInput?: boolean // when true, the user will be shown an input to add their own information if they choose. children?: CredentialRequest[] // list of sub-credentials relevant to the parent credential (e.g. FullNameCredential(FirstNameCredential, MiddleNameCredential LastNameCredential) }   The endpoint comes with a default credential requests configuration shown below which should be suffice for most customers.  Default 1-Click Credential Requests [ { &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;FirstNameCredential&quot; }, { &quot;type&quot;: &quot;MiddleNameCredential&quot; }, { &quot;type&quot;: &quot;LastNameCredential&quot; } ], &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;EmailCredential&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;PhoneCredential&quot; }, { &quot;type&quot;: &quot;AddressCredential&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;Line1Credential&quot; }, { &quot;type&quot;: &quot;Line2Credential&quot; }, { &quot;type&quot;: &quot;CityCredential&quot; }, { &quot;type&quot;: &quot;StateCredential&quot; }, { &quot;type&quot;: &quot;CountryCredential&quot; }, { &quot;type&quot;: &quot;ZipCodeCredential&quot; } ], &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;BirthDateCredential&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;SsnCredential&quot;, &quot;allowUserInput&quot;: true } ]   note This endpoint performs a similar role to /hasMatchingCredentials but with a few key differences: Can only be used with a user's phone numberTriggers an SMS verification message to the user that Verified Inc. sendsMuch greater chance of success getting user data than the standard acceptance flow because data is pulled on demand  caution The same API key necessary to call /1-click grants you, and only, you access to the encrypted credential data documented in Get Shared Credentials. Please keep this key secure.  Request Body​  1-Click Request { phone: string, // user's phone number in E.164 format email?: string, // user's email address; optional verificationOptions?: 'only_link' | 'only_code' | 'both_link_and_code' // Optional: controls the SMS verification messaging. Default is 'only_code'. content?: { title?: 'Signup' | 'Verify' | 'Apply', // Optional: title of the request page. Default is 'Signup' description?: string, // Optional: description displayed under the consent page header. Default is 'Make sure everything is correct:' } credentialRequests?: CredentialRequest[], // Optional: a list of one or more CredentialRequest objects. Encodes which credentials are being asked for redirectUrl?: string, // Optional: redirect url to redirect user to after the user has completed the 1-click flow. Default is the redirect url provided in your settings. isHosted?: boolean, // Optional: if you would like to do the non-hosted integration. Default is true. birthDate?: string // Optional: user's birth date in YYYY-MM-DD format. Required if you are using the non-hosted integration. }   Response Body​  1-Click Response { &quot;url&quot;: string // Verified Inc. Web Wallet url to redirect user to for credential request handling. It will redirect back to your client. Only present if match is true. &quot;match&quot;: boolean // indicates whether we can provide the user with a 1-Click Signup flow &quot;smsBody&quot;: string // the SMS body that we recommend sending to the user; You will only have to handle sending the SMS in Production. }   The url from the response ought to then be enriched with a redirectUrl query param that will take the next step in your target service's user onboarding webpage. More information on this can be found in the 1-Click Guide.  ","version":"Next","tagName":"h3"},{"title":"Trusted 1-Click​","type":1,"pageTitle":"API Reference","url":"/api-reference#trusted-1-click","content":" The &quot;trusted&quot; 1-click sign-up flow is very similar to the standard 1-click sign-up flow, but allows for the user to skip the phone OTP step with us. The &quot;trusted&quot; nomenclature comes from Verified Inc. having to perform additional integration checks prior to enabling this feature for your brand.  Method: POST Path: /1-click/trusted  You need to provide:  User's phoneUser's birth date.(Optional) User's email.(Optional) Credential request(s). If you would like to update from the default credential requests.  A credential requests encodes which  A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials you're asking the user to share with your A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand . It's a list of one or more CredentialRequest objects.   CredentialRequest { type: string, // the type of credential data being requested issuers: string[], // list of acceptable brandIds; if empty, all issuer brands are valid required?: boolean, // @deprecated - Use mandatory field instead. If the credential is required mandatory?: 'yes' | 'no' | 'if_available' // if the credential is required, not required, or required if available. description?: string // a description field that is shown to the user; can be used to explain why the information is being requested allowUserInput?: boolean // when true, the user will be shown an input to add their own information if they choose. children?: CredentialRequest[] // list of sub-credentials relevant to the parent credential (e.g. FullNameCredential(FirstNameCredential, MiddleNameCredential LastNameCredential) }   The endpoint comes with a default credential requests configuration shown below which should be suffice for most customers.  Default 1-Click Credential Requests [ { &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;FirstNameCredential&quot; }, { &quot;type&quot;: &quot;MiddleNameCredential&quot; }, { &quot;type&quot;: &quot;LastNameCredential&quot; } ], &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;EmailCredential&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;PhoneCredential&quot; }, { &quot;type&quot;: &quot;AddressCredential&quot;, &quot;children&quot;: [ { &quot;type&quot;: &quot;Line1Credential&quot; }, { &quot;type&quot;: &quot;Line2Credential&quot; }, { &quot;type&quot;: &quot;CityCredential&quot; }, { &quot;type&quot;: &quot;StateCredential&quot; }, { &quot;type&quot;: &quot;CountryCredential&quot; }, { &quot;type&quot;: &quot;ZipCodeCredential&quot; } ], &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;BirthDateCredential&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;SsnCredential&quot;, &quot;allowUserInput&quot;: true } ]   note This endpoint performs a similar role to /1-click but with a few key differences: You must handle user's phone verification within the same session of calling this endpointThe user's A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials are returned synchronously in the response body  Request Body​  Trusted 1-Click Request { phone: string, // user's phone number in E.164 format birthDate: string // user's birth date in YYYY-MM-DD format. Required if you are using the non-hosted integration. email?: string, // Optional; user's email address; credentialRequests?: CredentialRequest[], // Optional: a list of one or more CredentialRequest objects. Encodes which credentials are being asked for }   Response Body​  Trusted 1-Click Response { &quot;uuid&quot;: string // the 1-click uuid that can be used to update the user's credentials if they edit them post retrieval in your sign up form &quot;identifiers&quot;: { [identifierType: string]: string }, &quot;credentials&quot;: { [shortenedCredentialType: string]: string }, &quot;metadata&quot;: { &quot;identifiers&quot;: { [identifierType: string]: { [metadataType: string]: string } }, &quot;credentials&quot;: { [shortenedCredentialType: string]: { [metadataType: string]: string } } } }   The 1-click/trusted response is identical to the Get 1-Click Credentials response, but with the addition of the uuid attribute. This uuid can be used to update the user's credentials if they edit them post-retrieval in your sign-up form. You are inventive in calling the update endpoint for the benefit of issue to earn.  ","version":"Next","tagName":"h3"},{"title":"Get 1-Click Credentials​","type":1,"pageTitle":"API Reference","url":"/api-reference#get-1-click-credentials","content":" Get the A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials of a user who has completed a 1-Click Signup flow.  Method: GET Path: /1-click/{uuid}  When a  A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user completes a 1-Click Signup flow, the A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials are sent and stored securely awaiting retrieval. Additionally, as mentioned above in 1-Click , upon the user completing the flow, the user will be redirected back to your client with a 1ClickUuid as a query parameter.   This endpoint allows you to retrieve the  A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials related to the A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. request created as a result of a successful 1-Click Signup flow.   You need to provide:  the 1ClickUuid that was returned in the query param after redirecting the user to the redirectUrl attribute from the /1-click response  info Your brand's access to 1-Click credentials is deleted after 5 minutes of the initial credential data retrieval.  info If in the 1-Click Response, the credentials attribute is not present, then means the user opted out of sharing their credentials. But you can still use the 1ClickUuid to check if the user verified their phone number or email address.  Definitions An identifier is a phone number or email address the user uses to verify for 1-Click Signup. identifierType is the type of identifier (phone or email). A credential is a piece of data the user shares (e.g. birth date or SSN). A credential type is a string indicating the type of a credential (e.g. SsnCredential or FirstNameCredential). It's formatted in PascalCase and always includes the word Credential at the end. shortenedCredentialType is the shortened credential type in camelCase. The shortened credential type is just the type without the word Credential (e.g. birthDate or ssn). For subcredentials of a composite credential, it includes the shortened credential type of its parent credential(s) (e.g. fullName.firstName). Accepted Values Currently, accepted values for shortenedCredentialType are: emailfullName.firstNamefullName.middleNamefullName.lastNamebirthDateaddress.line1address.line2address.cityaddress.stateaddress.zipCodeaddress.countryssn Data in this context means identity information about a user (e.g. their name, contact information, etc.)Metadata in this context means any additional data that's not identity information about a user (e.g. the verification method for their identity information). metadataType is the type of metadata. Accepted Values Currently, possible values for metadataType are: id: unique identifier for a credential UUIDApplies only to credentials verificationMethod: how an identifier or credential was verified enum: &quot;phone_carrier&quot;, &quot;otp&quot;, &quot;self_attested&quot;, or nullApplies to both identifiers and credentials status: status of a credential enum: &quot;valid&quot; or &quot;revoked&quot;Applies only to credentials issuerUuid: brand that issued a credential UUIDApplies only to credentials issuanceDate: date a credential was issued Unix timestampApplies only to credentials expirationDate: date a credential expires Unix timestampApplies only to credentials  Response Body​  1-Click Response { &quot;identifiers&quot;: { [identifierType: string]: string }, &quot;credentials&quot;: { [shortenedCredentialType: string]: string }, &quot;metadata&quot;: { &quot;identifiers&quot;: { [identifierType: string]: { [metadataType: string]: string } }, &quot;credentials&quot;: { [shortenedCredentialType: string]: { [metadataType: string]: string } } } }   tip One particularly valuable piece of metadata is verificationMethod, which describes how the credential (piece of user data) was verified. It can take the following values: &quot;phone_carrier&quot;: verified via phone carrier records&quot;otp&quot;: verified via an OTP (one time passcode)&quot;self_attested&quot;: attested by the user themselves (not verified)null  User Data Format We support a few different formats for user data, for example the default format for the dateBirth credential is a unixTimestamp, but you can also request it different formats (e.g. MM/DD/YYYY or YYYY-MM-DD), or for the state credential, you can request it as a 2-letter abbreviation (e.g. CA) or as the full state name (e.g. California). Accepted Formats Currently, accepted formats for user data are: dateBirth: unixTimestamp, or any combination of y(year), M(month), d(day), /(slash), and -(dash)state: 2-letter abbreviation, full state namecountry: 2-letter abbreviation, full country nameaddress: instead getting a object with all keys, you can get a string with any combination, (e.g. line1, city, state-country)fullName: instead getting a object with all keys, you can get a string with any combination, (e.g. firstName, lastName)  ","version":"Next","tagName":"h3"},{"title":"Update 1-Click Credentials​","type":1,"pageTitle":"API Reference","url":"/api-reference#update-1-click-credentials","content":" This endpoint is to be used for updating the 1-click credentials passed to your brand in the 1-click non-hosted and 1-click trusted flows.  Method: POST Path: /1-click/{uuid}/credentials  You need to provide:  The 1-click uuidThe credential values in same format they were provided. See example below.  Example Simplified Credentials Format { &quot;fullName&quot;: { &quot;firstName&quot;: &quot;Leonardo&quot;, &quot;lastName&quot;: &quot;Messi&quot; }, &quot;ssn&quot;: &quot;111111110&quot;, &quot;email&quot;: &quot;leonardo@verified.inc&quot; }   This is an optional endpoint only relevant for the 1-click non-hosted and trusted variants. Because we send the user's data directly to your application, without the user using our web Wallet (which is part of the hosted variant), the user never gets a chance to update any of the data that's autofilled for them. If you allow them to editing and/or enrich their data on your side, within a UI/UX that you manage and implement, you can use this endpoint to pass that information back to us (and earn revenue share as a result).  important If this endpoint is optional, why use it? If you to call this endpoint after the user has made edits to their data on your side, you will earn a share of the revenue generated when the user uses that data elsewhere.revenue streams.  Request Body​  Update 1-Click Credentials Request Body { &quot;uuid&quot;: string // the 1-click uuid from the POST /1-click/trusted response &quot;credentials&quot;: { [shortenedCredentialType: string]: string } }   The response body will contain credentials conforming to credential schemas. Please see the Postman docs for examples of this response body.  Response Body​  1-Click Response [ { type: string, // credential type verificationMethod: string // verification method data: CredentialsList | { [credentialKey: string]: string // credential data }, } ]   The response body is currently in a more verbose format than that of the response for GET /sharedCredentials or POST /1-click (both trusted and non-hosted). However, in practice, the details of the response body are non-consequential for you as long as a 201 HTTP status code is received.    ","version":"Next","tagName":"h3"},{"title":"Advanced Functionality​","type":1,"pageTitle":"API Reference","url":"/api-reference#advanced-functionality","content":" The 1-Click Signup functionality that is covered in the core API section are higher level abstractions for these advanced endpoints. Thus, it is unlikely you will need to use these for most flows. However, for completeness please refer to this section for the advanced use cases documentation which covers endpoints mostly related to pure Issue to Earn integrations.    ","version":"Next","tagName":"h2"},{"title":"Check User Credentials​","type":1,"pageTitle":"API Reference","url":"/api-reference#check-user-credentials","content":" Check if a user has matching A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials. If so, a A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. request is created to get the A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user's consent to share the data.  Method: POST Path: /hasMatchingCredentials  You need to provide:  User's email or phone(Optional) Credential request(s). Required if Partner UUID is not provided.(Optional) Partner UUID. More information on the partner UUID use case can be found in the Issuance Guide.(Optional) List of the sub-credentials that make up the credential. If not provided, all sub-credentials will be returned.  A credential requests encodes which  A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials you're asking the user to share with your A brand is a company entity that has a corresponding unique api key, name, and card image. Brands can issue, request and receive credentials to and from users. + More... Example: ACME Bank is an Verified Inc. customer. However, they have two separate brands: ACME Lending and ACME Savings. Each brand has a unique api key, name, and card image. Components: Each brand has an associated umbrella customer. It is totally okay if your customer only has one brand. We want to have the flexibility to support multiple brands per customer. brand . It's a list of one or more CredentialRequest objects.   CredentialRequest { type: string, // the type of credential data being requested issuers: string[], // list of acceptable brandIds; if empty, all issuer brands are valid required?: boolean, // @deprecated - Use mandatory field instead. If the credential is required mandatory?: 'yes' | 'no' | 'if_available' // if the credential is required, not required, or required if available. description?: string // a description field that is shown to the user; can be used to explain why the information is being requested allowUserInput?: boolean // when true, the user will be shown an input to add their own information if they choose. children?: CredentialRequest[] // list of sub-credentials relevant to the parent credential (e.g. FullNameCredential(FirstNameCredential, MiddleNameCredential LastNameCredential) }   If you list multiple issuers, the user can include a credential issued by any one of those listed. If issuers is left empty the user can include a credential with matching type issued by any issuer.  note The Credential A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. requests attribute is required if a Partner UUID is not provided. If Partner UUID is provided, the Credential requests attribute is not used. Instead, a pre-defined set of accepting partner's credentials requests are used.More information on the partner UUID use case can be found in the Issuance Guide.  tip If mandatory field are missing, then the credential will be treated as optional.  note The Credential A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. requests objects can contain a children attribute. This attribute is used to specify the sub-credentials that make up the credential. If not provided, all sub-credentials will be returned. (eg: If you request a A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credential of type AddressCredential and you only want the city and state sub-credentials, you can specify that in the children attribute.)  caution The same ApiKey necessary to call /hasMatchingCredentials grants you and only you access to the encrypted credential data documented in Get Shared Credentials. Please keep this key secure.  Request Body​  { email?: string, // user's email address; optional if phone is provided phone?: string, // user's phone number; optional if email is provided credentialRequests: CredentialRequest[], // a list of one or more CredentialRequest objects. Encodes which credentials are being asked for; not used if partnerUuid is provided partnerUuid?: string, // partner's uuid; optional description?: string // A description displayed in the consent page header. If no description is provided, a default value will be displayed. }   Response Body​  HasMatchingCredentials { &quot;match&quot;: boolean, // indicates whether the user has matching credentials &quot;url&quot;: string // Verified Inc. Web Wallet url to redirect user to for credential request handling. It will redirect back to your client. Only present if match is true. }   The url from the response ought to then be enriched with a redirectUrl query param that will take the next step in your target service's user onboarding webpage. More information on this can be found in the Acceptance Guide.  Example Credential Request For example, if you want to check if a user has credentials of type SsnCredential, FullNameCredential and AddressCredential issued by any issuer you would send the following request: Request Body { &quot;email&quot;: &quot;richard@piedpiper.net&quot;, &quot;credentialRequests&quot;: [ { &quot;type&quot;: &quot;SsnCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; }, { &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; }, { &quot;type&quot;: &quot;PhoneCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;if_available&quot;, &quot;allowUserInput&quot;: true }, { &quot;type&quot;: &quot;AddressCredential&quot;, &quot;issuers&quot;: [], &quot;children&quot;: [ { &quot;type&quot;: &quot;CityCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;if_available&quot; }, { &quot;type&quot;: &quot;StateCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; }, { &quot;type&quot;: &quot;CountryCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; }, { &quot;type&quot;: &quot;ZipCodeCredential&quot;, &quot;issuers&quot;: [] } ] } ] } Let's break this down to understand what is happening here: SsnCredential is a &quot;single attribute atomic credential&quot; and therefore does not have any sub-credentials. Because it is marked as mandatory, it only matches if the user has a credential. SnnCredential { &quot;type&quot;: &quot;SsnCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; } FullNameCredential is a &quot;composite credential&quot; and therefore has 2 sub-credentials¹: FirstNameCredential, LastNameCredential. Because it is marked as mandatory, and it has no children attribute, it only matches if the user has a credential with all sub-credentials. FullNameCredential { &quot;type&quot;: &quot;FullNameCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; } PhoneCredential is a &quot;single attribute atomic credential&quot; and therefore does not have any sub-credentials. Because we set a allowUserInput attribute of true, the user will be given an opportunity to enter a new value if they choose to. Note that this have not relation with mandatory field, it just accepts and validates the user input data.&quot; PhoneCredential { &quot;type&quot;: &quot;PhoneCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;if_available&quot;, &quot;allowUserInput&quot;: true } The AddressCredential credential is made up of 6 sub-credentials: Line1Credential, Line2Credential, CityCredential, StateCredential, CountryCredential and ZipCodeCredential. But because we specified a children attribute, we are only asking for the CityCredential, StateCredential, CountryCredential and ZipCodeCredential sub-credentials. So Line1Credential and Line2Credential are ignored. AddressCredential { &quot;type&quot;: &quot;AddressCredential&quot;, &quot;issuers&quot;: [], &quot;children&quot;: [ { &quot;type&quot;: &quot;CityCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;if_available&quot; }, { &quot;type&quot;: &quot;StateCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; }, { &quot;type&quot;: &quot;CountryCredential&quot;, &quot;issuers&quot;: [], &quot;mandatory&quot;: &quot;yes&quot; }, { &quot;type&quot;: &quot;ZipCodeCredential&quot;, &quot;issuers&quot;: [] } ] } The user will be asked to share the CityCredential if available (this means if the user has a credential of type CityCredential it will be mandatory, but if the user does not have a credential of type CityCredential the user will still be able to share the AddressCredential credential). StateCredential and CountryCredential are mandatory and therefore the user must have a credential of each type to match. ZipCodeCredential is optional and therefore the user may or may not have a credential of type to match.  ","version":"Next","tagName":"h3"},{"title":"Get Shared Credentials​","type":1,"pageTitle":"API Reference","url":"/api-reference#get-shared-credentials-request-body","content":" Get verified A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credential data shared by a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user.  Method: GET Path: /sharedCredentials/{sharedCredentialsUuid}  When a  A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user responds to a A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. request the verified data is sent and stored securely awaiting retrieval. Additionally, as mentioned above in Check User Credentials , upon the user responding to the request, the user will be redirected back to your client with a sharedCredentialsUuid as a query parameter.   This endpoint allows you to retrieve the shared  A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials data related to the A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. request created as a result of a successful match from the /hasMatchingCredentials endpoint.   You need to provide:  the sharedCredentialsUuid that was returned in the query param after redirecting the user to the redirectUrl attribute from the /hasMatchingCredentialsresponse  info Your brand's access to shared credentials is deleted after 5 minutes of the initial credential data retrieval.  The response body consists of Credential objects with the plaintext user data.  Credential { &quot;id&quot;: string, // credential id &quot;type&quot;: string, // credential type &quot;issuer&quot;: string, // credential issuer brandId &quot;issuanceDate&quot;: number, // when credential was created as a milliseconds since epoch unix timestamp &quot;expirationDate&quot;?: number, // when credentials expires as a milliseconds since epoch unix timestamp &quot;data&quot;: Map&lt;string, any&gt; | Credential[] // credential data map/array that matches the credential type's JSON Schema definition }   Response Body​  SharedCredentials { &quot;uuid&quot;: string, // the uuid from the query parameter of the redirect back to your client; identifies the collection of credentials shared by the user &quot;credentials&quot;: Credential[], // a list of one or more Credential objects &quot;email&quot;?: string, // the user's email from the input to /hasMatchingCredentials; only present if email was provided &quot;phone&quot;?: string // the user's phone from the input to /hasMatchingCredentials; only present if phone was provided }   To facilitate extracting the credential data we recommend leveraging the Schema Resolver to get the schema of the credential types. Because Credential schemas are immutable they can then be cached and referenced when retrieving the credential data.    ","version":"Next","tagName":"h3"},{"title":"Issue Credentials​","type":1,"pageTitle":"API Reference","url":"/api-reference#issue-credentials","content":" Issue A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credentials to a A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user.  Method: POST Path: /credentials  You need to provide:  Credentials data arrayEither a phone and/or email attribute(Optional) Partner UUID. More information on the partner UUID use case can be found in the Issuance Guide.(Optional) Tracking Identifier for credential usage attribute. More information on the tracking identifier use case can be found in the Issuance Guide.  Data about the user, must comply with our credential schema definitions.  An example Credentials object is below:  Credentials { &quot;type&quot;: string, // credential type &quot;data&quot;: Map&lt;string, any&gt; | Credentials[], // credential data map/array that matches the credential type's JSON Schema definition &quot;id&quot;?: string, // credential id - uuid formatted; optional. If not provided, a random uuid will be generated &quot;expirationDate?&quot;: number // when the credential expires as a milliseconds since unix epoch; optional }   While not required, we recommend providing a unique id following uuid format for each credential. This allows for idempotent credential issuance - meaning if a duplicate id value is seen another credential will not be created. Expect a HTTP status code of 409 if this is the case. If you do not provide an id, a random uuid will be generated for you.  note An expiration date is not the only control on whether a credential is valid. You can also change the credential's status at any time, for example to revoke it. See Patch Credentials.  info Credential data is stored securely via a data privacy vault that encrypts and tokenizes the data. The data is only retrieved and decrypted for the brand that the A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user agrees to share with.  Composite Credentials Composite credentials are credentials that are made up of other credentials. For example, a FullNameCredential is made up of FirstNameCredential, MiddleNameCredential(optional), and LastNameCredential. When issuing a composite credential, you must provide the child credentials as well. Example Composite Credential { &quot;type&quot;: &quot;FullNameCredential&quot;, // based on the properties attribute of the schema // note that the data is an array of objects, not a single object &quot;data&quot;: [ { &quot;type&quot;: &quot;FirstNameCredential&quot;, &quot;data&quot;: { &quot;firstName&quot;: &quot;Richard&quot; } }, { &quot;type&quot;: &quot;LastNameCredential&quot;, &quot;data&quot;: { &quot;lastName&quot;: &quot;Hendricks&quot; } } ] } See Data Schemas for more information.  Request Body​  { &quot;credentials&quot;: Credentials[], // a list of one or more Credentials objects &quot;email&quot;?: string, // user's email address; optional if phone is provided &quot;phone&quot;?: string // user's phone number in E.164 format; optional if email is provided &quot;trackingId&quot;?: string // user tracking identifier }   Response Body​  CredentialsDto { &quot;email&quot;: string, // user's email address if provided &quot;phone&quot;: phone, // user's phone number if provided &quot;trackingId&quot;?: string // user tracking identifier if provided &quot;credentials&quot;: [{ &quot;id&quot;: string, // credential id &quot;type&quot;: string, // credential type &quot;data&quot;: Map&lt;string, any&gt; | Credentials[], // credential data map/array that matches your provided data and the credential type's JSON Schema definition &quot;issuanceDate&quot;: string, // when credential was created as a milliseconds since epoch unix timestamp &quot;expirationDate?&quot;: string, // when the credential expires as a milliseconds since unix epoch; optional &quot;status&quot;: 'valid' | 'revoked' // an enum to denote whether the credential is valid (all credentials are valid when first issued) — note that this is independent of the expirationDate }], &quot;url&quot;?: string // Only present if partnerUuid was provided and conditions are met. See the Issuance Guide for more information. }   The issued credential contains an id that you should store. You'll need this, for example, if you ever want to revoke the credential. We recommend storing the entire credential, indexed on the credential id. However, it is also an acceptable to store credential ids associated with a user and use the Get Credential or Get All User Credentials endpoint to retrieve the full credential.    ","version":"Next","tagName":"h3"},{"title":"Patch Credential​","type":1,"pageTitle":"API Reference","url":"/api-reference#patch-credential","content":" Patch a previously issued A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credential.  Method: PATCH Path: /credentials/{id}  You can optionally provide any of the following in the request body:  (Optional) new credential data(Optional) new credential expiration date(Optional) new credential status  Credential data must comply with our credential schema definitions.  note If a credential is expired but the status is 'valid' it is an unusable credential. Likewise, if the credential as not expired but the status is 'revoked', it is also not usable credential.  info Credential data is stored securely via a data privacy vault that encrypts and tokenizes the data. The data is only retrieved and decrypted for the brand that the A user is an individual in the Verified Inc. network. Each user has at least one phone or emails, aka userIdentifiers associated with them. They can have multiple of either. + More... Example: Richard is a user in your account system and potentially of the Verified Inc. network. He has two email addresses and one phone with him. Credentials can be issued to or requested of him using any of these identifiers. Components: Referenced in API endpoints `/hasMatchingCredentials` and `/issueCredentials`. User data is associated by using these user identifiers that you already keep on your users. user agrees to share with.  Request Body​  { &quot;data&quot;: Map&lt;string, any&gt; | Credentials[], // credential data map/array that matches the credential type's JSON schema definition &quot;expirationDate?&quot;: number // when the credentials expires as a milliseconds since epoch unix timestamp; optional &quot;status&quot;: 'valid' | 'revoked' // an enum to denote whether the credential is valid (all credentials are valid when first issued) — note that this is independent of the expirationDate }   Response Body​  CredentialDto { &quot;id&quot;: string, // credential id &quot;type&quot;: string, // credential type &quot;data&quot;: Map&lt;string, any&gt; | Credentials[], // credential data map/array that matches your provided data and the credential type's JSON Schema definition &quot;issuanceDate&quot;: string, // when credential was created as a milliseconds since epoch unix timestamp &quot;expirationDate?&quot;: number, // when the credential expires as a milliseconds since epoch unix timestamp; optional &quot;status&quot;: 'valid' | 'revoked' // an enum to denote whether the credential is valid (all credentials are valid when first issued) — note that this is independent of the expirationDate. }   The resultant credential id remains the same, so after a 200 HTTP response code is received, nothing further needs to be updated on your end.    ","version":"Next","tagName":"h3"},{"title":"Patch All User Credentials​","type":1,"pageTitle":"API Reference","url":"/api-reference#patch-all-user-credentials","content":" Patch all previously issued by your brand to a user.  Method: PATCH Path: /userCredentials/{userIdentifier}  A  A userIdentifier is an email or phone value which is associated with a user. + More... Example: richard@pipedpiper.net is one of Richard Hendrick's user identifiers. He also has a phone number of +10123456789, another one of his user identifiers. Components: We have abstracted away the complexity of dealing with a third party uuid to refer to a user. Instead, you can use the user's email or phone number to refer to and issue credentials to users in our system. userIdentifier is either a phone number or email address associated with a user.   The only credential value that can by updated in this manner is status. A credential status must be in the request body.  note This endpoint all modifies credentials issued to the user by your brand.  Request Body​  { &quot;status&quot;: 'valid' | 'revoked' // an enum to denote whether the credential is valid (all credentials are valid when first issued) — note that this is independent of the expirationDate }   Response Body​  UserCredentialsDto { &quot;credentials&quot;: { &quot;id&quot;: string, // credential id &quot;type&quot;: string, // credential type &quot;data&quot;: Map&lt;string, any&gt; | Credentials[], // credential data map/array that matches your provided data and the credential type's JSON Schema definition &quot;issuanceDate&quot;: string, // when credential was created as a milliseconds since epoch unix timestamp &quot;expirationDate?&quot;: number, // when the credential expires as a milliseconds since epoch unix timestamp; optional &quot;status&quot;: 'valid' | 'revoked' // an enum to denote whether the credential is valid (all credentials are valid when first issued) — note that this is independent of the expirationDate. }[] }   The response body contains a list of all credentials that were modified on the credentials key.    ","version":"Next","tagName":"h3"},{"title":"Get Credential​","type":1,"pageTitle":"API Reference","url":"/api-reference#get-credential","content":" Get a previously issued A credential is a collection of data about a person. It's issued by a company and can be requested by other network participants, gated by the user's consent. + More... Example: ACME Lending issues a KYC verification credential to Richard (an ACME user). This includes Richard's contact information and account numbers, as well as a level of confidence in the accuracy of the data. Components: A company issues credentials following the steps in the Issuance Guide. credential.  Method: GET Path: /credentials/{id}  This endpoint returns a credential (issued by your brand) via the credential id.  Response Body​  CredentialDto { &quot;id&quot;: string, // credential id &quot;type&quot;: string, // credential type &quot;data&quot;: Map&lt;string, any&gt; | Credentials[], // credential data map/array that matches your provided data and the credential type's JSON Schema definition &quot;issuanceDate&quot;: string, // when credential was created as a milliseconds since epoch unix timestamp &quot;expirationDate?&quot;: number, // when the credential expires as a milliseconds since epoch unix timestamp; optional &quot;status&quot;: 'valid' | 'revoked' // an enum to denote whether the credential is valid (all credentials are valid when first issued) — note that this is independent of the expirationDate. }     ","version":"Next","tagName":"h3"},{"title":"Get All User Credentials​","type":1,"pageTitle":"API Reference","url":"/api-reference#get-all-user-credentials","content":" Get all previously issued by your brand to a user.  Method: GET Path: /userCredentials/{userIdentifier}  A  A userIdentifier is an email or phone value which is associated with a user. + More... Example: richard@pipedpiper.net is one of Richard Hendrick's user identifiers. He also has a phone number of +10123456789, another one of his user identifiers. Components: We have abstracted away the complexity of dealing with a third party uuid to refer to a user. Instead, you can use the user's email or phone number to refer to and issue credentials to users in our system. userIdentifier is either a phone number or email address associated with a user.   note This endpoint all modifies credentials issued to the user by your brand.  caution It should be clear that this endpoint should not be used in place of /hasMatchingCredentials, which can check user credentials across many issuers but does not return the credentials' values. This endpoint is simply a nice to have for an issuer to see all credentials they have issued to a user.  Response Body​  UserCredentialsDto { &quot;credentials&quot;: { &quot;id&quot;: string, // credential id &quot;type&quot;: string, // credential type &quot;data&quot;: Map&lt;string, any&gt; | Credentials[], // credential data map/array that matches your provided data and the credential type's JSON Schema definition &quot;issuanceDate&quot;: string, // when credential was created as a milliseconds since epoch unix timestamp &quot;expirationDate?&quot;: number, // when the credential expires as a milliseconds since epoch unix timestamp; optional &quot;status&quot;: 'valid' | 'revoked' // an enum to denote whether the credential is valid (all credentials are valid when first issued) — note that this is independent of the expirationDate. }[] }   The response body contains a list of all credentials on the credentials key.    ","version":"Next","tagName":"h3"},{"title":"Get Partner Credential Requests​","type":1,"pageTitle":"API Reference","url":"/api-reference#get-partner-credential-requests","content":" Get the partner's pre-defined A request (or credential request) is a request for a credentials to be shared by a user. It's created when a company successfully checks if a user has matching credentials, via /hasMatchingCredentials. Only if the user has the ability to response with the matching credentials is a request created. + More... Example: Hooli FinTech checks if Richard has a SSN and LastName credential issued by ACME Lending. Because he does, a request is created for those credentials specifically from ACME Lending. Hooli presents this request to Richard by directing him to the `url` received in the `/hasMatchingCredentials` response body. Components: A company creates a user specific request by using /hasMatchingCredentials.. If it is case the user does not have the desired credentials then a request is not created. If it is the case the user does, a request is created and is returned in the form of a `url` attribute in response to the client. credential requests.  Method: GET Path: /credentialRequests/{partnerUuid}  This endpoint returns a list of credential requests that the partner has defined for their brand.  Response Body​  CredentialRequestsResponse { &quot;credentialRequests&quot;: CredentialRequest[] }   CredentialRequest { type: string, // the type of credential data being requested issuers: string[], // list of acceptable brandIds; if empty, all issuer brands are valid required?: boolean, // @deprecated - Use mandatory field instead. If the credential is required mandatory?: 'yes' | 'no' | 'if_available' // if the credential is required, not required, or required if available. description?: string // a description field that is shown to the user; can be used to explain why the information is being requested allowUserInput?: boolean // when true, the user will be shown an input to add their own information if they choose. children?: CredentialRequest[] // list of sub-credentials relevant to the parent credential (e.g. FullNameCredential(FirstNameCredential, MiddleNameCredential LastNameCredential) }   note This endpoint is helpful when developing the partner issuance flow. More information about partner issuance can be found in the Issuance Guide.   ","version":"Next","tagName":"h3"}],"options":{"excludeRoutes":["1-click-guide","1-click-or-free-use-case","about-verified-inc","acceptance-guide","demos","faq","hooli-demo","hooli-partner-demo","issuance-guide","kikoff-guide","kredita-demo","usage-guide"],"indexBaseUrl":true,"id":"default"}}