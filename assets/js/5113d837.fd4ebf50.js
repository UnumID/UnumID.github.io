"use strict";(self.webpackChunkunum_id=self.webpackChunkunum_id||[]).push([[185],{5387:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905)),a=(n(7874),n(106));const s={id:"server-sdk",title:"Server SDK",sidebar_label:"Server SDK",slug:"/server-sdk"},o=void 0,l={unversionedId:"server-sdk",id:"server-sdk",title:"Server SDK",description:"This is a lightweight TypeScript SDK that lets your company act as one or more issuers and/or verifiers.",source:"@site/docs/server-sdk.mdx",sourceDirName:".",slug:"/server-sdk",permalink:"/server-sdk",draft:!1,tags:[],version:"current",frontMatter:{id:"server-sdk",title:"Server SDK",sidebar_label:"Server SDK",slug:"/server-sdk"}},d={},p=[{value:"Overview",id:"overview",level:2},{value:"Authentication",id:"authentication",level:3},{value:"Errors",id:"errors",level:3},{value:"Distribution",id:"distribution",level:3},{value:"Global Dependencies",id:"global-dependencies",level:3},{value:"Usage",id:"usage",level:3},{value:"UNUM_ENV",id:"unum_env",level:4},{value:"UNUM_DEBUG",id:"unum_debug",level:4},{value:"LOG_LEVEL",id:"log_level",level:4},{value:"Issuer",id:"issuer",level:2},{value:"<code>registerIssuer</code>",id:"registerissuer",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Response Body: <code>RegisteredIssuer</code>",id:"response-body-registeredissuer",level:4},{value:"<code>issueCredentials</code>",id:"issuecredentials",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Response Body: <code>Credential</code> Array",id:"response-body-credential-array",level:4},{value:"<code>reEncryptCredentials</code>",id:"reencryptcredentials",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Response Body: <code>Credential</code> Array",id:"response-body-credential-array-1",level:4},{value:"<code>handleSubjectCredentialRequests</code>",id:"handlesubjectcredentialrequests",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Response Body: <code>Credential</code> Array",id:"response-body-credential-array-2",level:4},{value:"<code>updateCredentialStatuses</code>",id:"updatecredentialstatuses",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Response Body: Empty",id:"response-body-empty",level:4},{value:"<code>revokeAllCredentials</code>",id:"revokeallcredentials",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Response Body: Empty",id:"response-body-empty-1",level:4},{value:"<code>verifySignedDid</code>",id:"verifysigneddid",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Response Body: <code>VerifiedStatus</code>",id:"response-body-verifiedstatus",level:4},{value:"<code>verifySubjectCredentialRequests</code>",id:"verifysubjectcredentialrequests",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Response Body: <code>VerifiedStatus</code>",id:"response-body-verifiedstatus-1",level:4},{value:"Verifier",id:"verifier",level:2},{value:"<code>registerVerifier</code>",id:"registerverifier",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Response Body: <code>RegisteredVerifier</code>",id:"response-body-registeredverifier",level:4},{value:"<code>sendRequest</code>",id:"sendrequest",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Response Body: <code>PresentationRequestPostDto</code>",id:"response-body-presentationrequestpostdto",level:4},{value:"<code>verifyPresentation</code>",id:"verifypresentation",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Response Body: <code>DecryptedPresentation</code>",id:"response-body-decryptedpresentation",level:4},{value:"<code>sendSms</code>",id:"sendsms",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Response Body: Empty",id:"response-body-empty-2",level:4},{value:"<code>sendEmail</code>",id:"sendemail",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Response Body: Empty",id:"response-body-empty-3",level:4},{value:"<code>checkCredentialStatuses</code>",id:"checkcredentialstatuses",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Response Body: <code>CredentialIdToStatusMap</code>.",id:"response-body-credentialidtostatusmap",level:4}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This is a lightweight TypeScript SDK that lets your company act as one or more ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"},"issuers")," and/or ",(0,r.kt)(a.Z,{type:"verifier",mdxType:"Tip"},"verifiers"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Before you begin:")," Please read the ",(0,r.kt)("a",{parentName:"p",href:"deployment-overview#server-sdk"},"deployment overview"),". You need to be registered as an Verified Inc. customer, and you need to register at least one issuer or verifier. (You can register zero to many of each, depending on your use case.) You'll receive issuer and verifier API keys to use with this SDK."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Auto generated SDK documentation can be found ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/server-sdk-typescript/index.html"},"here"),". Similar documentation for object definitions can be found ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/index.html"},"here"),". The auto generated documentation is more granular then this page, however less styled.")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Server SDK uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"UnumDto")," type to facilitate handling many response body types, while providing a reliable structure to access the result body (and, importantly, the rolling JWT ",(0,r.kt)("inlineCode",{parentName:"p"},"authToken"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="UnumDto"',title:'"UnumDto"'},'{\n  "authToken": string; // The JWT which is used by the SDK to authenticate with UnumID\'s SaaS. This is periodically refreshed thus its value should be read and stored in every resultant function call. \n  "body": T; // The placeholder for the function\'s response type is function specific. \n}\n')),(0,r.kt)("h3",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Every request detailed below requires a JWT bearer ",(0,r.kt)("inlineCode",{parentName:"p"},"authToken")," as a first parameter (aside from registration calls which require an entity scoped ApiKey). This is used to authenticate requests to the Verified Inc. cloud. This auth token is updated on every subsequent function call and should be read via the ",(0,r.kt)("inlineCode",{parentName:"p"},"authToken")," attribute and persisted accordingly for later requests. "),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("p",null,"Errors returned by the Verified Inc. cloud will also be wrapped in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UnumDto")," object so that the potentially updated ",(0,r.kt)("inlineCode",{parentName:"p"},"authToken")," can be retrieved. Validation errors, which are created prior to any calls to Verified Inc., will be of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," and are thrown. Because in this case a network call is never made, there's no potential new ",(0,r.kt)("inlineCode",{parentName:"p"},"authToken")," to pass back. For this reason, ",(0,r.kt)("strong",{parentName:"p"},"we recommend wrapping all SDK calls in a try/catch.")),(0,r.kt)("h3",{id:"distribution"},"Distribution"),(0,r.kt)("p",null,"This project is open ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UnumID/server-sdk-typescript"},"source")," and publicly published on the official npm ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@unumid/server-sdk"},"registry"),". For example it can be pulled with: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i @unumid/server-sdk\n")),(0,r.kt)("p",null,"or "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn add @unumid/server-sdk\n")),(0,r.kt)("h3",{id:"global-dependencies"},"Global Dependencies"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"Node.js")," v14.0.0 or higher (preferably v14.15.0 or higher)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://yarnpkg.com/"},"Yarn"))),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The following environment variables are required to be set to use the SDK properly."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UNUM_ENV")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UNUM_DEBUG")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LOG_LEVEL"))),(0,r.kt)("h4",{id:"unum_env"},"UNUM_ENV"),(0,r.kt)("p",null,"One needs to provide the SDK the with an environment variable to denote its run time environment, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"production"),". For the Typescript SDK this done via the ",(0,r.kt)("inlineCode",{parentName:"p"},"UNUM_ENV")," environment variable. The three relevant values are: ",(0,r.kt)("inlineCode",{parentName:"p"},"production"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sandbox"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dev"),". You need to use one of these exactly in order for the SDK to communicate with Verified Inc.'s SaaS. The default value if nothing is supplied is ",(0,r.kt)("inlineCode",{parentName:"p"},"sandbox"),"."),(0,r.kt)("h4",{id:"unum_debug"},"UNUM_DEBUG"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"UNUM_DEBUG")," environment variable defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". Setting to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," enables logging of decrypted presentations at the ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," level. Due to presentations containing potentially sensitive information it is ",(0,r.kt)("em",{parentName:"p"},"not")," advised to use in a production environment. Note: the ",(0,r.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL")," environment variable also needs to be set to at least ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," level in order to be visible."),(0,r.kt)("h4",{id:"log_level"},"LOG_LEVEL"),(0,r.kt)("p",null,"The default logs level is ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),". You can change this to ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," for more information (set the environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"LOG_LEVEL = debug"),"). The logs default to ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),", so you can easily aggregate them from disk using the log provider of your choice."),(0,r.kt)("p",null,"We use standard NPM log levels. Learn more about these ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston#logging-levels"},"here"),"."),(0,r.kt)("h2",{id:"issuer"},"Issuer"),(0,r.kt)("p",null,"You can use the Server SDK to act as an ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"}),", for example to issue credentials and change credential statuses."),(0,r.kt)("p",null,"Jump to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#registerissuer"},(0,r.kt)("inlineCode",{parentName:"a"},"registerIssuer"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#issuecredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"issueCredentials"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reencryptcredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"reEncryptCredentials"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#updatecredentialstatuses"},(0,r.kt)("inlineCode",{parentName:"a"},"updateCredentialStatuses"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#revokeallcredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"revokeAllCredentials"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#verifysigneddid"},(0,r.kt)("inlineCode",{parentName:"a"},"verifySignedDid"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#verifysubjectcredentialrequests"},(0,r.kt)("inlineCode",{parentName:"a"},"verifySubjectCredentialRequests")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"registerissuer"},(0,r.kt)("inlineCode",{parentName:"h3"},"registerIssuer")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Register an ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"})," (corresponding to your customer UUID and issuer API key). ")),(0,r.kt)("p",null,"As a customer, you can register as many issuers as you like (or none at all), depending on your use case. Note, however, that you'll need a unique issuer API key for each one."),(0,r.kt)("p",null,"The optional ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/interfaces/versioninfo.html"},"VersionInfo")," attribute is where request header requirements are defined in order to use your API. It is also useful for how a ",(0,r.kt)("a",{href:"/terminology#subject"},(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"})),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/interfaces/subjectcredentialrequests.html"},"CredentialRequests")," should be routed to your application in order for the corresponding Server SDK version to preform verifications. This can be updated at later point from the Verified Inc. ",(0,r.kt)("a",{parentName:"p",href:"https://dashboard.sandbox-unum.id/#/login"},"dashboard"),". If not supplied simply the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," attribute will be used."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"You need to store the ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," (",(0,r.kt)("inlineCode",{parentName:"p"},"did"),") and values in encryption and signing key pairs (",(0,r.kt)("inlineCode",{parentName:"p"},"keys"),") object that this returns. You'll need these to issue credentials to users. ")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"The DID and public keys are nonsensitive, but ",(0,r.kt)("strong",{parentName:"p"},"you should store the private keys securely and ",(0,r.kt)("em",{parentName:"strong"},"never")," share them."))),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'"apiKey": string // your issuer API key\n"url": string, // the base url of which UnumID\'s SaaS will interface with\n"versionInfo"?: VersionInfo[] // optional arrays of objects for how to contact specific versions of your issuer and subsequently the sever sdk. \n')),(0,r.kt)("h4",{id:"response-body-registeredissuer"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/server-sdk-typescript/interfaces/registeredissuer.html"},(0,r.kt)("inlineCode",{parentName:"a"},"RegisteredIssuer"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="RegisteredIssuer"',title:'"RegisteredIssuer"'},'{\n  "uuid": string, // identifies issuer in Verified Inc. database\n  "customerUuid": string, // identifies customer in Verified Inc. database\n  /* To store: */\n  // highlight-next-line\n  "did": string, // identifies issuer in Verified Inc. ecosystem\n  "name": string, // human-readable name for issuer. Displayed to users in mobile apps when verifiers request credentials. Comes from the name of the ApiKey used to register the Issuer.\n  "createdAt": string, // when issuer was registered\n  "updatedAt": string, // when issuer was last updated\n  /* To store: */\n  // highlight-start\n  "keys": {\n    "signing": {\n      "id": string, // this is very helpful to identify the key pair. You need to store this.\n      "privateKey": string, // you use this to create signatures on credentials You need to store this.\n      "publicKey": string, // subjects and verifiers use this to verify your signatures on credentials. This is not so necessary to store because is publicly accessible.\n    }\n    "encryption": {\n      "id": string, // this is very helpful to identify the key pair. You need to store this.\n      "privateKey": string, // used to decrypted data. You need to store this.\n      "publicKey": string, // used for others to encrypt data. This is not so necessary to store because is publicly accessible.\n    }\n  }\n  // highlight-end\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"issuecredentials"},(0,r.kt)("inlineCode",{parentName:"h3"},"issueCredentials")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Issue ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"}),"s to a ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),".")),(0,r.kt)("p",null,"You need to provide:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"your ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"}),"  ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," "),(0,r.kt)("li",{parentName:"ol"},"the target subject DID to receive the credentials"),(0,r.kt)("li",{parentName:"ol"},"data array about the ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"}),"s for the ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"})),(0,r.kt)("li",{parentName:"ol"},"your issuer signing private key")),(0,r.kt)("p",null,"The first and fourth inputs are returned by ",(0,r.kt)("a",{parentName:"p",href:"#registerissuer"},(0,r.kt)("inlineCode",{parentName:"a"},"registerIssuer")),". The second is the target ",(0,r.kt)("inlineCode",{parentName:"p"},"subject")," DID whom to issue the credentials to.\nThe third, data about the subject, must comply with our credential ",(0,r.kt)("a",{parentName:"p",href:"/schema"},"schema")," definitions."),(0,r.kt)("p",null,"You can optionally provide:"),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"expiration date"),(0,r.kt)("li",{parentName:"ol"},"boolean to issue credentials to self (",(0,r.kt)("em",{parentName:"li"},"default value of true is recommended"),")")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"An expiration date is not the only control on whether a credential is valid. You can also change the credential's status at any time, for example to revoke it (see ",(0,r.kt)("a",{parentName:"p",href:"#updatecredentialstatuses"},(0,r.kt)("inlineCode",{parentName:"a"},"updateCredentialStatuses")),").")),(0,r.kt)("p",null,"The default value of issueCredentialsToSelf is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," because it greatly facilitates the availability of the credentials in the case of being called upon for re-issuance via the endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"/userCredentialRequests")," defined in our ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/UnumIDAdmin/fd75b174b33ff0c5b4de87118cb11188"},"OpenAPI specification"),". In the default state a credential with the same data is encrypted with your Issuer encryption public key so can only be decrypted with your private key. This then allows for you to leverage the SDK function ",(0,r.kt)("a",{parentName:"p",href:"#reencryptcredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"reEncryptCredentials"))," to re-encrypt the credential for the subject at a later point. For example, a Subject may make this request is if they have associated new key pairs with their DID."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"While we store the encrypted credentials, only the entity with the corresponding private key can decrypt them.")),(0,r.kt)("p",null,"Each issued credential contains a credential ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," that you should store. You'll need this, for example, if you ever want to revoke the credential. ",(0,r.kt)("strong",{parentName:"p"},"We recommend storing the entire credential, indexed on the credential ",(0,r.kt)("inlineCode",{parentName:"strong"},"id"),".")," If you ",(0,r.kt)("em",{parentName:"p"},"only")," store the credential ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", it'll be very difficult to later remember what the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," corresponds to."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In the full ",(0,r.kt)("inlineCode",{parentName:"p"},"credential")," objects that are returned there are also ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," fields within ",(0,r.kt)("inlineCode",{parentName:"p"},"credentialSubject")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"credentialStatus"),", but these are different. They refer to the subject ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," and credential status identifiers, respectively, as defined in the emerging ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/vc-data-model/#credential-subject"},"W3C Verifiable Credential specification"),".")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The private key ",(0,r.kt)("em",{parentName:"p"},"never")," leaves your server. The Server SDK only needs it to perform cryptographic functions on your behalf.")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'"authToken": string, // your auth token\n"issuer": string, // your issuer DID\n"subject": string, // the target subject DID to receive the credentials\n"credentialDataList": [{\n  "type": string, // The credential type\n  [key: string]: any, // data about subject (any valid JSON)\n}],\n"signingPrivateKey": string // your issuer signing private key\n"expirationDate"?: string, // (optional) when credential will no longer be valid (ISO 8601 date/time)\n"issueCredentialsToSelf"?: boolean // (optional, defaults to true) whether to decline issuing credentials to self\n')),(0,r.kt)("h4",{id:"response-body-credential-array"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/types/interfaces/credentialpb.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Credential"))," Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Credential"',title:'"Credential"'},'[{\n    "context": ["https://www.w3.org/2018/credentials/v1"], // for conformance with W3C Verifiable Credential spec\n    "credentialStatus": {\n        "id": string, // a url for credential\'s status\n        "type": "CredentialStatus"\n    },\n    // a string representation of an object with  with an id attribute and any number of arbitrary key value pairs.\n    "credentialSubject": stringify({\n        "id": string, // subject DID\n        [key: string]: any, // // credential data about subject\n    }),\n    "issuer": string, // issuer DID\n    "type": string[], // credential type(s), always begins with "VerifiableCredential" per W3C standard\n    /* To store: */\n    // highlight-next-line\n    "id": string, // identifies credential (version 4 UUID)\n    "issuanceDate": string, // when credential was issued (ISO 8601 date/time)\n    "expirationDate": string, // when credential will no longer be valid (ISO 8601 date-time)\n    "proof": Proof // cryptographic proof created by signing credential with your issuer signing private key. Can be used to verify credential.\n}]\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"reencryptcredentials"},(0,r.kt)("inlineCode",{parentName:"h3"},"reEncryptCredentials")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Re-encrypt valid, non-expired ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"}),"s for a ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),".")),(0,r.kt)("p",null,"You need to provide:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"your ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"}),"  ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," "),(0,r.kt)("li",{parentName:"ol"},"your issuer signing private key"),(0,r.kt)("li",{parentName:"ol"},"your issuer encryption private key"),(0,r.kt)("li",{parentName:"ol"},"your issuer encryption key id"),(0,r.kt)("li",{parentName:"ol"},"the target subject DID to receive the credentials")),(0,r.kt)("p",null,"The first four inputs are returned by ",(0,r.kt)("a",{parentName:"p",href:"#registerissuer"},(0,r.kt)("inlineCode",{parentName:"a"},"registerIssuer")),". The fifth is the target subject you have issued credentials to previously using ",(0,r.kt)("a",{parentName:"p",href:"#issuecredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"issueCredentials")),"."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"To ensure this function be used with total effectiveness it is necessary that the credentials you are wanting to re-encrypt were originally issued with the default value for ",(0,r.kt)("inlineCode",{parentName:"p"},"issueCredentialsToSelf")," of ",(0,r.kt)("a",{parentName:"p",href:"#issuecredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"issueCredentials")),", which is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,r.kt)("p",null,"You can optionally provide:"),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"a list of credential types (if not provided then all credentials for the subject are re-encrypted)")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The main use case for this function is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/userCredentialRequests")," required Issuer endpoint defined in our ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/UnumIDAdmin/fd75b174b33ff0c5b4de87118cb11188"},"OpenAPI specification")," which servers as the interface for users to request credentials to be re-encrypted, akin to re-issued, to new devices. The ",(0,r.kt)("inlineCode",{parentName:"p"},"credentialTypes")," input will come directly from the credential requests.")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The private keys ",(0,r.kt)("em",{parentName:"p"},"never")," leave your server. The Server SDK only needs it to perform cryptographic functions on your behalf.")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'"authToken": string, // your auth token\n"issuerDid": string, // your issuer DID\n"signingPrivateKey": string, // your Issuer\'s signing private key\n"encryptionPrivateKey": string, // your Issuer\'s encryption private key\n"issuerEncryptionKeyId": string, // your Issuer\'s encryption key id\n"subjectDid": string, // the target subject DID to receive the re-encrypted credentials, must have issued credentials to them previously\n"credentialTypes"?: string[], // (optional) list of credential types to re-encrypt (if not provided then all credentials for the subject are re-encrypted)\n')),(0,r.kt)("h4",{id:"response-body-credential-array-1"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/types/interfaces/credentialpb.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Credential"))," Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Credential"',title:'"Credential"'},'[{\n    "context": ["https://www.w3.org/2018/credentials/v1"], // for conformance with W3C Verifiable Credential spec\n    "credentialStatus": {\n        "id": string, // a url for credential\'s status\n        "type": "CredentialStatus"\n    },\n    // a string representation of an object with  with an id attribute and any number of arbitrary key value pairs.\n    "credentialSubject": stringify({\n        "id": string, // subject DID\n        [key: string]: any, // // credential data about subject\n    }),\n    "issuer": string, // issuer DID\n    "type": string[], // credential type(s), always begins with "VerifiableCredential" per W3C standard\n    /* To store: */\n    // highlight-next-line\n    "id": string, // identifies credential (version 4 UUID)\n    "issuanceDate": string, // when credential was issued (ISO 8601 date/time)\n    "expirationDate": string, // when credential will no longer be valid (ISO 8601 date-time)\n    "proof": Proof // cryptographic proof created by signing credential with your issuer signing private key. Can be used to verify credential.\n}]\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"handlesubjectcredentialrequests"},(0,r.kt)("inlineCode",{parentName:"h3"},"handleSubjectCredentialRequests")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Handle verifying a subjectCredentialRequest and attempting to re-encrypt valid, non-expired ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"}),"s for a ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),". The function effectively combines the verifySubjectCredentialRequests with reEncryptCredential. ")),(0,r.kt)("p",null,"For the individual call to verifySubjectCredentialRequests you would need to prove:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"your ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"}),"  ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," "),(0,r.kt)("li",{parentName:"ol"},"the ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"})," ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})),(0,r.kt)("li",{parentName:"ol"},"the subjectCredentialRequests object from the /userCredentialRequests endpoint as defined by the OpenApi Spec.")),(0,r.kt)("p",null,"For an individual call to reEncryptCredentials you would need to provide:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"your ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"}),"  ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," "),(0,r.kt)("li",{parentName:"ol"},"your issuer signing private key"),(0,r.kt)("li",{parentName:"ol"},"your issuer encryption private key"),(0,r.kt)("li",{parentName:"ol"},"your issuer encryption key id"),(0,r.kt)("li",{parentName:"ol"},"the target subject DID to receive the credentials")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The main use case for this function is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/userCredentialRequests")," required Issuer endpoint defined in our ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/UnumIDAdmin/fd75b174b33ff0c5b4de87118cb11188"},"OpenAPI specification")," which servers as the interface for users to request credentials to be re-encrypted, akin to re-issued, to new devices. The ",(0,r.kt)("inlineCode",{parentName:"p"},"credentialTypes")," input will come directly from the credential requests. Many of the other inputs can simply be passed via the endpoint as well.")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The private keys ",(0,r.kt)("em",{parentName:"p"},"never")," leave your server. The Server SDK only needs it to perform cryptographic functions on your behalf.")),(0,r.kt)("p",null,"The response body contains all the credential that were able to be re-encrypted to the target subject."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="CredentialRequest"',title:'"CredentialRequest"'},"{\n  type: string; // the string matching the desire credential type\n  issuers: string[]; //list of acceptable issuer DIDs that have issued the credential\n  required: boolean; // to denote wether this particular credential is required. Defaults behavior resolves this to true.\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="SubjectCredentialRequests"',title:'"SubjectCredentialRequests"'},"{\n  credentialRequests: CredentialRequests[]; // the string matching the desire credential type\n  proof: Proof; // proof signed by the subject\n}\n")),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * A subset of the inputs to reEncryptCredentials.\n * The complete set of inputs includes inputs shared by verifySubjectCredentialRequests and our first class attributes to HandleSubjectCredentialRequestsOptions.\n */\ninterface HandleSubjectCredentialRequestsReEncryptOptions {\n    signingPrivateKey: string, // your Issuer's signing private key\n    encryptionPrivateKey: string, // your Issuer's encryption private key\n    issuerEncryptionKeyId: string, // your Issuer's encryption key id\n    credentialTypes: string[] // (optional) list of credential types to re-encrypt (if not provided then all credentials for the subject are re-encrypted)\n}\n\n/**\n * Interface to encapsulate all the attributes necessary to fullfil a verifySubjectCredentialRequests and\n * a verifySubjectCredentialRequests in the helper function handleSubjectCredentialRequests\n */\ninterface HandleSubjectCredentialRequestsOptions {\n    authorization: string; // your auth token\n    issuerDid: string; // your issuer DID\n    subjectDidWithEncryptionKeyId: string; // the target subject DID to receive the re-encrypted credentials, must have issued credentials to the base DID previously\n    subjectCredentialRequests: SubjectCredentialRequests; // the subject's credential request objects\n    reEncryptCredentialsOptions: HandleSubjectCredentialRequestsReEncryptOptions; // inputs to specific to the reEncryptCredentials function.\n}\n")),(0,r.kt)("h4",{id:"response-body-credential-array-2"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/types/interfaces/credentialpb.html"},(0,r.kt)("inlineCode",{parentName:"a"},"Credential"))," Array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Credential"',title:'"Credential"'},'[{\n    "context": ["https://www.w3.org/2018/credentials/v1"], // for conformance with W3C Verifiable Credential spec\n    "credentialStatus": {\n        "id": string, // a url for credential\'s status\n        "type": "CredentialStatus"\n    },\n    // a string representation of an object with  with an id attribute and any number of arbitrary key value pairs.\n    "credentialSubject": stringify({\n        "id": string, // subject DID\n        [key: string]: any, // // credential data about subject\n    }),\n    "issuer": string, // issuer DID\n    "type": string[], // credential type(s), always begins with "VerifiableCredential" per W3C standard\n    /* To store: */\n    // highlight-next-line\n    "id": string, // identifies credential (version 4 UUID)\n    "issuanceDate": string, // when credential was issued (ISO 8601 date/time)\n    "expirationDate": string, // when credential will no longer be valid (ISO 8601 date-time)\n    "proof": Proof // cryptographic proof created by signing credential with your issuer signing private key. Can be used to verify credential.\n}]\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"updatecredentialstatuses"},(0,r.kt)("inlineCode",{parentName:"h3"},"updateCredentialStatuses")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Update a ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"}),"'s status (i.e. make it invalid).")),(0,r.kt)("p",null,"You need to provide the credential id list, ",(0,r.kt)("inlineCode",{parentName:"p"},"credentialIds"),", (which ",(0,r.kt)("a",{parentName:"p",href:"#issuecredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"issueCredentials"))," returns per ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"},"credential"),") and a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/modules.html#credentialstatusoptions"},"CredentialStatusOptions")," ",(0,r.kt)("inlineCode",{parentName:"p"},"status"),'. Currently there are only two valid statuses: "valid" and "revoked".'),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"As noted in ",(0,r.kt)("a",{parentName:"p",href:"#issuecredentials"},(0,r.kt)("inlineCode",{parentName:"a"},"issueCredentials")),", ",(0,r.kt)("strong",{parentName:"p"},"we recommend storing at least the credential type along with the subject associated with it, if not each entire credential, indexed on their credential ",(0,r.kt)("inlineCode",{parentName:"strong"},"id"),".")," If you ",(0,r.kt)("em",{parentName:"p"},"only")," store the credential ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", it'll be very difficult to later remember what the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," corresponds to.")),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  \"authToken\": string, // your auth token\n  \"credentialIds\": string[], // ids of the credentials to update\n  \"status\": 'valid' | 'revoked' // status to update the credential to (defaults to 'revoked')\n}\n")),(0,r.kt)("h4",{id:"response-body-empty"},"Response Body: Empty"),(0,r.kt)("p",null,"If unsuccessful, an exception will be thrown."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"revokeallcredentials"},(0,r.kt)("inlineCode",{parentName:"h3"},"revokeAllCredentials")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Revoke all ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"}),"s (i.e. make all invalid).")),(0,r.kt)("p",null,"You need to provide your issuer's ",(0,r.kt)("inlineCode",{parentName:"p"},"did")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"signingPrivateKey")," also the target ",(0,r.kt)("inlineCode",{parentName:"p"},"subjectDid"),". Only credentials issued by the associated issuer are revoked from the subject. The signing private key is necessary for the request signature to be created within the SDK. The signature is necessary to be verified by the SaaS prior to revoking all the credentials. "),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The signing private key ",(0,r.kt)("em",{parentName:"p"},"never")," leaves your server. The Server SDK only needs it to perform cryptographic functions on your behalf.")),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "authToken": string, // your auth token\n  "issuerDid": string // did of the issuer of credential you would like to revoke\n  "signingPrivateKey": string // issuer\'s signing private key\n  "subjectDid": string // did of target subject whom to revoke all the credentials issued by the issuer\n}\n')),(0,r.kt)("h4",{id:"response-body-empty-1"},"Response Body: Empty"),(0,r.kt)("p",null,"If unsuccessful, an exception will be thrown."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"verifysigneddid"},(0,r.kt)("inlineCode",{parentName:"h3"},"verifySignedDid")),(0,r.kt)("p",null,"Verify a signed ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"}),", aka Decentralized Identifier."),(0,r.kt)("p",null,"You need to provide the your ",(0,r.kt)("inlineCode",{parentName:"p"},"issuerdid")," along with the signed ",(0,r.kt)("inlineCode",{parentName:"p"},"DID")," object."),(0,r.kt)("p",null,"The DID object is a string identifier signed by the subject's ECC private key. This function verifies the cryptographic signature is valid. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The main use case is for the ",(0,r.kt)("inlineCode",{parentName:"p"},"/userCredentialRequests")," required Issuer endpoint defined in our ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/UnumIDAdmin/fd75b174b33ff0c5b4de87118cb11188"},"OpenAPI specification"),". It facilitates getting DID information for users within your service. The User DID is necessary to then issue re-usable identity credentials to.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="DID"',title:'"DID"'},"{\n  id: string; // the string matching the desire credential type\n  proof: Proof; //list of acceptable issuer DIDs that have issued the credential\n}\n")),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "authToken": string, // your auth token\n  "issuerDid": string // the did of your issuer\n  "signedDid": DID // the signed DID object\n}\n')),(0,r.kt)("h4",{id:"response-body-verifiedstatus"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/server-sdk-typescript/interfaces/verifiedstatus.html"},(0,r.kt)("inlineCode",{parentName:"a"},"VerifiedStatus"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="VerifiedStatus"',title:'"VerifiedStatus"'},"{\n  isVerified: boolean; // returns true if the signature of the DID is verified to be signed by the DID signing key\n  message?: string; // (optional) only populated iff isVerified is false\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"verifysubjectcredentialrequests"},(0,r.kt)("inlineCode",{parentName:"h3"},"verifySubjectCredentialRequests")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Verify a ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),"'s request for ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"}),"s.")),(0,r.kt)("p",null,"You need to be able to receive these credential requests from Verified Inc. and pass them to this function. To do this, you need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"/userCredentialRequests")," endpoint that conforms to our ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/UnumIDAdmin/fd75b174b33ff0c5b4de87118cb11188"},"OpenAPI specification"),". "),(0,r.kt)("p",null,"Each request is cryptographically signed by the ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),"'s private key. This function verifies the signatures are valid. Furthermore, it validates that all requests are from the same subject and that requested Issuer requirements are met. After which, your application code will need to evaluate wether it can issue the requested credentials. An example implementation can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UnumID/demo-issuer-server/blob/main/src/services/api/credentialRequest/credentialRequest.class.ts"},"here"),"."),(0,r.kt)("p",null,"The main use case of this to allow bootstrapping users that just installed the Verified Inc. Wallet with credentials necessary to use across the network, i.e for instant sign ups with a partner. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'Despite this having "verify" in its name, this function serves Issuers in determining whether a subject\'s request for credentials is valid. It is up to your application logic to determine whether you have the data relating to the the subject to issue the requested credentials.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="CredentialRequest"',title:'"CredentialRequest"'},"{\n  type: string; // the string matching the desire credential type\n  issuers: string[]; //list of acceptable issuer DIDs that have issued the credential\n  required: boolean; // to denote wether this particular credential is required. Defaults behavior resolves this to true.\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="SubjectCredentialRequests"',title:'"SubjectCredentialRequests"'},"{\n  credentialRequests: CredentialRequests[]; // the string matching the desire credential type\n  proof: Proof; // proof signed by the subject\n}\n")),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "authToken": string, // your auth token\n  "issuerDid": string, // the did of your issuer\n  "subjectDid": string // the did of the subject\n  "subjectCredentialRequests: SubjectCredentialRequests // object containing list of CredentialRequests with a Proof signed by the Subject.\n}\n')),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"All parameters aside from the authToken ought to be provided verbatim via the specified OpenApi ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/UnumIDAdmin/fd75b174b33ff0c5b4de87118cb11188"},"/userCredentialRequests")," endpoint.")),(0,r.kt)("h4",{id:"response-body-verifiedstatus-1"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/server-sdk-typescript/interfaces/verifiedstatus.html"},(0,r.kt)("inlineCode",{parentName:"a"},"VerifiedStatus"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="VerifiedStatus"',title:'"VerifiedStatus"'},"{\n  isVerified: boolean; // returns true if all requests are verified and validation requirements are met\n  message?: string; // (optional) only populated iff isVerified is false\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"verifier"},"Verifier"),(0,r.kt)("p",null,"You can use the Server SDK to act as an ",(0,r.kt)(a.Z,{type:"verifier",mdxType:"Tip"}),", for example to make ",(0,r.kt)(a.Z,{type:"request",mdxType:"Tip"},"requests")," and verify ",(0,r.kt)(a.Z,{type:"presentation",mdxType:"Tip"},"presentations"),"."),(0,r.kt)("p",null,"Jump to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#registerverifier"},(0,r.kt)("inlineCode",{parentName:"a"},"registerVerifier"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sendrequest"},(0,r.kt)("inlineCode",{parentName:"a"},"sendRequest"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#verifypresentation"},(0,r.kt)("inlineCode",{parentName:"a"},"verifyPresentation"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sendsms"},(0,r.kt)("inlineCode",{parentName:"a"},"sendSms"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sendemail"},(0,r.kt)("inlineCode",{parentName:"a"},"sendEmail"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#checkcredentialstatuses"},(0,r.kt)("inlineCode",{parentName:"a"},"checkCredentialStatuses")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"registerverifier"},(0,r.kt)("inlineCode",{parentName:"h3"},"registerVerifier")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Register a ",(0,r.kt)(a.Z,{type:"verifier",mdxType:"Tip"})," (corresponding to your customer UUID and verifier API key). ")),(0,r.kt)("p",null,"As a customer, you can register as many verifiers as you like (or none at all), depending on your use case. Note, however, that you'll need a unique verifier API key for each one."),(0,r.kt)("p",null,"The optional ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/interfaces/versioninfo.html"},"VersionInfo")," attribute is where request header requirements are defined in order to use your API. It is also useful for how encrypted ",(0,r.kt)("a",{href:"/terminology#presentation"},(0,r.kt)(a.Z,{type:"presentation",mdxType:"Tip"})),"s from Verified Inc.'s SaaS, which originate from the Mobile SDK, should be routed to your application in order for the corresponding Server SDK version to preform verifications. This can be updated at later point from the Verified Inc. ",(0,r.kt)("a",{parentName:"p",href:"https://dashboard.sandbox-unum.id/#/login"},"dashboard"),". If not supplied simply the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," attribute will be used. "),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"You need to store the ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," (",(0,r.kt)("inlineCode",{parentName:"p"},"did"),") and values in encryption and signing key pairs (",(0,r.kt)("inlineCode",{parentName:"p"},"keys"),") object that this returns. You'll need these to make requests and verify presentations.")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"The DID and public keys are nonsensitive, but ",(0,r.kt)("strong",{parentName:"p"},"you should store the private keys securely and ",(0,r.kt)("em",{parentName:"strong"},"never")," share them."))),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'"url": string, // the base url of which UnumID\'s SaaS will interface with\n"apiKey": string // your verifier API key\n"versionInfoList?": VersionInfo[] // optional versioning information of your application corresponding to various Verified Inc. Server SDK versions.\n')),(0,r.kt)("h4",{id:"response-body-registeredverifier"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/server-sdk-typescript/interfaces/registeredverifier.html"},(0,r.kt)("inlineCode",{parentName:"a"},"RegisteredVerifier"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="RegisteredVerifier"',title:'"RegisteredVerifier"'},'{\n  "uuid": string, // identifies verifier in Verified Inc. database\n  "customerUuid": string, // identifies customer in Verified Inc. database\n  /* To store: */\n  // highlight-next-line\n  "did": string, // identifiers verifier in Verified Inc. ecosystem\n  "name": string, // human-readable name for verifier. Displayed to users in mobile apps when you make requests. Comes from the name of the ApiKey used to register the Verifier.\n  "createdAt": string, // when verifier was registered (ISO 8601 date/time)\n  "updatedAt": string, // when verifier was last updated (ISO 8601 date/time)\n  /* To store: */\n  // highlight-start\n  "keys": {\n    "signing": {\n      "id": string, // this is very helpful to identify the key pair. You need to store this.\n      "privateKey": string, // you use this to create signatures on requests\n      "publicKey": string, // subjects use this to verify your signatures on requests\n    }, "encryption": {\n      "id": string, // this is very helpful to identify the key pair. You need to store this.\n      "privateKey": string, // you use this to decrypt presentations you receive from subjects\n      "publicKey": string, // subjects use this to encrypt presentations they send to you\n    }\n  }\n  // highlight-end\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sendrequest"},(0,r.kt)("inlineCode",{parentName:"h3"},"sendRequest")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Create a ",(0,r.kt)(a.Z,{type:"request",mdxType:"Tip"})," to be displayed or sent to a ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),".")),(0,r.kt)("p",null,"You need to provide:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"your verifier ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," "),(0,r.kt)("li",{parentName:"ol"},"your verifier signing private key"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(a.Z,{type:"holder app",mdxType:"Tip"})," UUID"),(0,r.kt)("li",{parentName:"ol"},"credential request(s)")),(0,r.kt)("p",null,"The first two are returned by ",(0,r.kt)("a",{parentName:"p",href:"#registerverifier"},(0,r.kt)("inlineCode",{parentName:"a"},"registerVerifier")),". The third (holder app UUID) identifies the mobile app users will share ",(0,r.kt)(a.Z,{type:"presentation",mdxType:"Tip"},"presentations")," from. For example, Hooli FinTech might use the UUID for ACME Bank's mobile app, so the user is prompted to share a presentation from that app."),(0,r.kt)("p",null,"The fourth (credential requests) encodes which ",(0,r.kt)(a.Z,{type:"credential",mdxType:"Tip"},"credentials")," you're asking the user to include in a presentation. It's a list of one or more ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/interfaces/credentialrequest.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CredentialRequest"))," objects (defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UnumID/types/blob/00ba819e661e2856ba9909923ac6f083b9a15e85/index.d.ts#L113-L117"},"Verified Inc. generic types project"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="CredentialRequest"',title:'"CredentialRequest"'},"{\n  type: string; // credential type. This must match type of previously issued credential.\n  issuers: string[]; // list of DIDs for acceptable issuers. If multiple, any one is acceptable.\n  required?: boolean; // if credential is required (default is true)\n}\n")),(0,r.kt)("p",null,"If you list multiple ",(0,r.kt)(a.Z,{type:"issuer",mdxType:"Tip"},"issuers"),", the user can include a credential issued by ",(0,r.kt)("em",{parentName:"p"},"any one")," of those listed."),(0,r.kt)("p",null,"You can optionally provide:"),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"expiration date"),(0,r.kt)("li",{parentName:"ol"},"metadata")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"The private key ",(0,r.kt)("em",{parentName:"p"},"never")," leaves your server. The Server SDK only needs it to perform cryptographic functions on your behalf.")),(0,r.kt)("p",null,"The response body consists of enriched information regarding entities referenced in the request. For example, the verifier's encryption and signing ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/interfaces/publickeyinfo.html"},"PublicKeyInfo")," is included to facilitate verifying the presentation request's signature and submitting and encrypted presentation in response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="PublicKeyInfo"',title:'"PublicKeyInfo"'},'{\n    "id": string, // key id\n    "type": "secp256r1" || "RSA, // key type\n    "status": "valid" || "invalid", // key status\n    "encoding": "pem" || "base58", // key encoding\n    "publicKey": string, // public key value\n    "createdAt": Date, // when key was created \n    "updatedAt": Date, // when key status was last updated\n}\n')),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'"authToken": string, // your auth token\n"verifier": string, // your verifier DID\n"credentialRequests": CredentialRequest[], // a list of one or more CredentialRequest objects. Encodes which credentials should be included in presentation that responds to PresentationRequest.\n"signingPrivateKey": string, // your verifier signing private key\n"holderAppUuid"?: string, // (optional) identifies mobile app subjects will share presentations from. If not present then defaults the Verified Inc. Wallet app, which is the recommend holder to use.\n"expiresAt"?: string, // (optional) when PresentationRequest will no longer be valid (ISO 8601 date/time). Default is 10 minutes after creation.\n"metadata"?: object // (optional) any additional data to include in PresentationRequest\n')),(0,r.kt)("h4",{id:"response-body-presentationrequestpostdto"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/types/interfaces/presentationrequestpostdto.html"},(0,r.kt)("inlineCode",{parentName:"a"},"PresentationRequestPostDto"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="PresentationRequestPostDto"',title:'"PresentationRequestPostDto"'},'{\n  "presentationRequest": {\n    "uuid": string, // identifies PresentationRequest in Verified Inc. database\n    "createdAt": string, // when PresentationRequest was created (ISO 8601 date/time)\n    "updatedAt": string, // when PresentationRequest was last updated (ISO 8601 date/time). Should always be same as createdAt.\n    "expiresAt": string, // when PresentationRequest will no longer be valid (ISO 8601 date/time)\n    "verifier": string, // your verifier DID\n    "credentialRequests": CredentialRequest[], // a list of one or more CredentialRequest objects. Encodes which credentials should be included in presentation that responds to PresentationRequest.\n    "proof": Proof, // acryptographic proof created by signing PresentationRequest with your verifier signing private key. Can be used to verify PresentationRequest.\n    "metadata": object // any additional data to include in PresentationRequest\n  },\n  "verifier": {\n      "name": string, // human readable name for verifier. Displayed to users in mobile apps.\n      "did": string, // your verifier DID\n      "encryptionPublicKey": PublicKeyInfo, // PublicKeyInfo for the RSA key\n      "signingPublicKey": PublicKeyInfo // PublicKeyInfo for the secp256r1 key\n  },\n  "issuers": {\n      "IssuerDid:string": { // map keyed on issuer DID(s) that issued requested credential(s)\n        "name": string, // human readable name for issuer\n        "did": string, // issuer DID\n        "cardImageUrl": string // issuer\'s card image URL\n      }\n  },\n  /* You send this to a user with the Web SDK: */\n  // highlight-next-line\n  "deeplink": string, // deep link (URL) that can be used to trigger intended mobile app to load PresentationRequest\n  /* You display this to a user with the Web SDK */\n  // highlight-next-line\n  "qrCode": string // QR code representation of deep link (encoded as data URL)\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"verifypresentation"},(0,r.kt)("inlineCode",{parentName:"h3"},"verifyPresentation")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Verify ",(0,r.kt)(a.Z,{type:"presentation",mdxType:"Tip"})," shared by ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),".")),(0,r.kt)("p",null,"You need to be able to receive presentations from users and pass them to this function. To do this, you need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"/presentation")," endpoint that conforms to our ",(0,r.kt)("a",{parentName:"p",href:"https://gist.github.com/UnumIDAdmin/a81ffe5bd383b1ec36cb1b6bb1ccd26e"},"OpenAPI specification"),". The Verified Inc. cloud sends encrypted presentations to this endpoint, which should pass those presentations to the ",(0,r.kt)("inlineCode",{parentName:"p"},"verifyPresentation")," function to be decrypted and verified."),(0,r.kt)("p",null,"You need to provide:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"your verifier ",(0,r.kt)(a.Z,{type:"DID",mdxType:"Tip"})," "),(0,r.kt)("li",{parentName:"ol"},"your verifier encryption private key"),(0,r.kt)("li",{parentName:"ol"},"encrypted presentation (received at ",(0,r.kt)("inlineCode",{parentName:"li"},"/presentation")," endpoint)"),(0,r.kt)("li",{parentName:"ol"},"(optional, but recommended) presentation request (received at ",(0,r.kt)("inlineCode",{parentName:"li"},"/presentation")," endpoint)")),(0,r.kt)("p",null,"The fist two are returned by ",(0,r.kt)("a",{parentName:"p",href:"#registerverifier"},(0,r.kt)("inlineCode",{parentName:"a"},"registerVerifier")),"."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"Verified Inc. ",(0,r.kt)("em",{parentName:"p"},"never")," has access to sensitive data contained in presentations. The ",(0,r.kt)("a",{parentName:"p",href:"mobile-sdk-overview"},"Mobile SDK")," encrypts each presentation (with your verifier encryption public key) before sending it to us. We have no ability to decrypt the data \u2014 only you do.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"presentationRequest")," is optional in order for the server sdk can handle verifying presentations that may not have a corresponding request. However, if ",(0,r.kt)("inlineCode",{parentName:"p"},"presentationRequest")," is supplied from UnumID's SaaS via the ",(0,r.kt)("inlineCode",{parentName:"p"},"/presentation")," endpoint, it is strongly recommended that it is provided as it performs additional validation checks on your behalf.")),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'"authToken": string, // your auth token\n"encryptedPresentation": EncryptedData, // encrypted presentation\n"verifierDid": string, // your verifier DID\n"encryptionPrivateKey": string // your verifier encryption private key\n"presentationRequest"?: PresentationRequestDto // (optional) presentation request dto object to verify presentation credentials meet request requirements. This is an optional param to support the future use case of handling verifying presentations that are not in response to PresentationRequest\n')),(0,r.kt)("h4",{id:"response-body-decryptedpresentation"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/server-sdk-typescript/interfaces/decryptedpresentation.html"},(0,r.kt)("inlineCode",{parentName:"a"},"DecryptedPresentation"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="DecryptedPresentation"',title:'"DecryptedPresentation"'},'{\n  "isVerified": boolean; // whether the presentation is valid\n  "type": \'VerifiablePresentation\' | \'DeclinedPresentation\' // type of presentation. DeclinedPresentation means user declined request and the submitted presentation\'s VerifiableCredential attribute was undefined or an empty array.\n  "presentation": Presentation, // decrypted Presentation object\n  "message"?: string; // (optional) included if isVerified is false. Explains why verification failed.\n}\n')),(0,r.kt)("p",null,"You can decide what to do with the result of the verification. We recommend that you require that ",(0,r.kt)("inlineCode",{parentName:"p"},"isVerified")," must be ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", but depending on your use case you may want to handle this case differently. "),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sendsms"},(0,r.kt)("inlineCode",{parentName:"h3"},"sendSms")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This is a utility function you won't usually need. For most use cases, the ",(0,r.kt)("a",{parentName:"em",href:"/web-sdk"},"Web SDK")," or a separate service of your choice will handle sending SMS messages. But you can use this function if helpful.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Send an SMS containing a deep link to a ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),".")),(0,r.kt)("p",null,"Messages you send will (necessarily) be delivered from an Verified Inc. associated phone number, but this association won't be visible to the user. You can of course use your own SMS sending service if you prefer."),(0,r.kt)("p",null,"To request a ",(0,r.kt)(a.Z,{type:"presentation",mdxType:"Tip"})," from a user, you need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"create the ",(0,r.kt)(a.Z,{type:"request",mdxType:"Tip"})," object using ",(0,r.kt)("a",{parentName:"li",href:"#sendrequest"},(0,r.kt)("inlineCode",{parentName:"a"},"sendRequest")),", which includes a deep link that references the request"),(0,r.kt)("li",{parentName:"ol"},"send or display the deep link to the user")),(0,r.kt)("p",null,"SMS is one way to send the deep link. The SMS message will be in the format:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Verification Request: ","[verifier_name]",". Click here to complete: ","[deep_link]")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The verifier is corresponding to the presentation request from which the deeplink references. Because you are the acting verifier, the name will be what ever you provided during ",(0,r.kt)("a",{parentName:"p",href:"#registerverifier"},"verifier registration"),". ")),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "authToken": string, // your auth token\n  "to": string, // phone number to send SMS to\n  "deeplink": string // the deeplink corresponding to the presentation request you would like served to the user\n}\n')),(0,r.kt)("h4",{id:"response-body-empty-2"},"Response Body: Empty"),(0,r.kt)("p",null,"If unsuccessful, an exception will be thrown."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sendemail"},(0,r.kt)("inlineCode",{parentName:"h3"},"sendEmail")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This is a utility function you won't usually need. For most use cases, the ",(0,r.kt)("a",{parentName:"em",href:"/web-sdk"},"Web SDK")," or a separate service of your choice will handle sending emails. But you can use this function if helpful.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Send an email containing a deep link to a ",(0,r.kt)(a.Z,{type:"subject",mdxType:"Tip"}),".")),(0,r.kt)("p",null,"Emails you send will be delivered from ",(0,r.kt)("a",{parentName:"p",href:"mailto:no-reply@verified.inc."},"no-reply@verified.inc.")," You can of course use your own email sending service if you prefer."),(0,r.kt)("p",null,"To request a ",(0,r.kt)(a.Z,{type:"presentation",mdxType:"Tip"})," from a user, you need to:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"create the ",(0,r.kt)(a.Z,{type:"request",mdxType:"Tip"})," object using ",(0,r.kt)("a",{parentName:"li",href:"#sendrequest"},(0,r.kt)("inlineCode",{parentName:"a"},"sendRequest")),", which includes a deep link that references the request"),(0,r.kt)("li",{parentName:"ol"},"send or display the deep link to the user")),(0,r.kt)("p",null,"Email is one way to send the deep link. The email will be in the format:"),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"subject:")," Verification Request: ","[verifier_name]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"body:")," Click here to complete: ","[deep_link]"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The verifier is corresponding to the presentation request from which the deeplink references. Because you are the acting verifier, the name will be what ever you provided during ",(0,r.kt)("a",{parentName:"p",href:"#registerverifier"},"verifier registration"),". ")),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "authToken": string, // your auth token\n  "to": string, // email address to send email to\n  "deeplink": string // the deeplink corresponding to the presentation request you would like served to the user\n}\n')),(0,r.kt)("h4",{id:"response-body-empty-3"},"Response Body: Empty"),(0,r.kt)("p",null,"If unsuccessful, an exception will be thrown."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"checkcredentialstatuses"},(0,r.kt)("inlineCode",{parentName:"h3"},"checkCredentialStatuses")),(0,r.kt)("p",null,"Used to check the status of individual credentials. This done on the Verifier's behalf in ",(0,r.kt)("a",{parentName:"p",href:"#verifypresentation"},(0,r.kt)("inlineCode",{parentName:"a"},"verifyPresentation")),", however exposing for extra utility."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," attribute of the response's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/interfaces/credentialstatusinfo.html"},"CredentialStatusInfo")," is of type ",(0,r.kt)("a",{parentName:"p",href:"https://docs.verified.inc/types/modules.html#credentialstatusoptions"},"CredentialStatusOptions"),". Currently the only valid status are: verified and revoked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="CredentialStatusInfo"',title:'"CredentialStatusInfo"'},'{\n  "createdAt": Date; // the time  the credential was recorded as created in the UnumID SaaS db\n  "updatedAt": Date; // the time  the credential was recorded as updated in the UnumID SaaS db\n  "credentialId": string; // the did (aka id) of the credential this status is in regard to\n  "status": \'valid\' | \'revoked\'; // status of the credential\n}\n')),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "credentialIds": string[], // the array of ids of the credentials in question\n}\n')),(0,r.kt)("h4",{id:"response-body-credentialidtostatusmap"},"Response Body: ",(0,r.kt)("a",{parentName:"h4",href:"https://docs.verified.inc/types/interfaces/credentialidtostatusmap.html"},(0,r.kt)("inlineCode",{parentName:"a"},"CredentialIdToStatusMap")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="CredentialIdToStatusMap"',title:'"CredentialIdToStatusMap"'},"{\n  [credentialId: string]: CredentialStatusInfo;\n}\n")))}c.isMDXComponent=!0}}]);