(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{102:function(e,t,n){"use strict";var a=n(0),i=n(103);t.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},103:function(e,t,n){"use strict";var a=n(0),i=Object(a.createContext)(void 0);t.a=i},117:function(e,t,n){"use strict";var a=n(0),i=n.n(a),o=n(102),s=n(93),r=n(56),l=n.n(r);var c=37,p=39;t.a=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,u=e.values,d=e.groupId,b=e.className,m=Object(o.a)(),h=m.tabGroupChoices,g=m.setTabGroupChoices,j=Object(a.useState)(r),O=j[0],f=j[1],v=a.Children.toArray(e.children),y=[];if(null!=d){var S=h[d];null!=S&&S!==O&&u.some((function(e){return e.value===S}))&&f(S)}var N=function(e){var t=e.target,n=y.indexOf(t),a=v[n].props.value;f(a),null!=d&&(g(d,a),setTimeout((function(){var e,n,a,i,o,s,r,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,i=e.bottom,o=e.right,s=window,r=s.innerHeight,c=s.innerWidth,n>=0&&o<=c&&i<=r&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l.a.tabItemActive),setTimeout((function(){return t.classList.remove(l.a.tabItemActive)}),2e3))}),150))},R=function(e){var t,n;switch(e.keyCode){case p:var a=y.indexOf(e.target)+1;n=y[a]||y[0];break;case c:var i=y.indexOf(e.target)-1;n=y[i]||y[y.length-1]}null===(t=n)||void 0===t||t.focus()};return i.a.createElement("div",{className:"tabs-container"},i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n},b)},u.map((function(e){var t=e.value,n=e.label;return i.a.createElement("li",{role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,className:Object(s.a)("tabs__item",l.a.tabItem,{"tabs__item--active":O===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:R,onFocus:N,onClick:N},n)}))),t?Object(a.cloneElement)(v.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}},118:function(e,t,n){"use strict";var a=n(0),i=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return i.a.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return d}));var a=n(3),i=(n(0),n(95)),o=n(117),s=n(118),r=(n(96),n(97));const l={id:"web-sdk",title:"Web SDK",sidebar_label:"Web SDK",slug:"/web-sdk"},c={unversionedId:"web-sdk",id:"web-sdk",isDocsHomePage:!1,title:"Web SDK",description:"This is a lightweight React library that allows a web client to display and sends requests to users, who can respond with presentations.",source:"@site/docs/web-sdk.mdx",slug:"/web-sdk",permalink:"/web-sdk",version:"current",sidebar_label:"Web SDK"},p=[{value:"Overview",id:"overview",children:[{value:"Minimum Requirements",id:"minimum-requirements",children:[]},{value:"TypeScript support",id:"typescript-support",children:[]},{value:"Reference Client Application",id:"reference-client-application",children:[]}]},{value:"Installation",id:"installation",children:[]},{value:"Functionality",id:"functionality",children:[{value:"Create <code>PresentationRequests</code>",id:"create-presentationrequests",children:[]},{value:"Display Deep Links",id:"display-deep-links",children:[]}]},{value:"API Props",id:"api-props",children:[{value:"<code>applicationTitle</code>",id:"applicationtitle",children:[]},{value:"<code>userInfo</code>",id:"userinfo",children:[]},{value:"<code>presentationRequest</code>",id:"presentationrequest",children:[]},{value:"<code>deeplinkImgSrc</code>",id:"deeplinkimgsrc",children:[]},{value:"<code>createInitialPresentationRequest</code>",id:"createinitialpresentationrequest",children:[]},{value:"<code>createPresentationRequest</code>",id:"createpresentationrequest",children:[]},{value:"<code>sendEmail</code>",id:"sendemail",children:[]},{value:"<code>sendSms</code>",id:"sendsms",children:[]},{value:"<code>goToLogin</code>",id:"gotologin",children:[]}]},{value:"Examples",id:"examples",children:[{value:"No Fallbacks",id:"no-fallbacks",children:[]},{value:"Fallbacks",id:"fallbacks-1",children:[]},{value:"Controlled Request Creation",id:"controlled-request-creation",children:[]},{value:"Redux",id:"redux",children:[]}]}],u={toc:p};function d({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},u,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This is a lightweight React library that allows a web client to display and sends ",Object(i.b)(r.a,{type:"request",mdxType:"Tip"},"requests")," to users, who can respond with ",Object(i.b)(r.a,{type:"presentation",mdxType:"Tip"},"presentations"),"."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Please ",Object(i.b)("a",{parentName:"p",href:"mailto:support@Unum.ID"},"contact us")," for frameworks other than React."))),Object(i.b)("h2",{id:"overview"},"Overview"),Object(i.b)("h3",{id:"minimum-requirements"},"Minimum Requirements"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"React v16.8.0 and above")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"English language")," (internationalization coming soon)")),Object(i.b)("h3",{id:"typescript-support"},"TypeScript support"),Object(i.b)("p",null,"The SDK is written in TypeScript and exports relevant types. Some types are pulled from our shared types library, ",Object(i.b)("a",{parentName:"p",href:"https://github.com/UnumID/types"},Object(i.b)("inlineCode",{parentName:"a"},"@unumid/types")),". We recommend adding ",Object(i.b)("inlineCode",{parentName:"p"},"@unumid/types")," as a dependency to ensure full type support between this Web SDK and the ",Object(i.b)("a",{parentName:"p",href:"/server-sdk"},"Server SDK"),"."),Object(i.b)("h3",{id:"reference-client-application"},"Reference Client Application"),Object(i.b)("p",null,"This is available at Git and can be cloned using:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"git clone https://github.com/UnumID/Verifier-Client-SDK-Client-Reference-App.git\n")),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("p",null,"The Web SDK is currently only available via GitHub, but will be available via the NPM and Yarn registries soon."),Object(i.b)(o.a,{defaultValue:"npm",values:[{label:"NPM",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"npm",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"npm install @unumid/web-sdk@https://github.com/UnumID/Verifier-Client-SDK.git\n"))),Object(i.b)(s.a,{value:"yarn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"yarn add @unumid/web-sdk@https://github.com/UnumID/Verifier-Client-SDK.git\n")))),Object(i.b)("p",null,"Alternatively, you can add the following to your ",Object(i.b)("inlineCode",{parentName:"p"},"package.json")," and run ",Object(i.b)("inlineCode",{parentName:"p"},"npm install")," or ",Object(i.b)("inlineCode",{parentName:"p"},"yarn install"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'"@unumid/web-sdk": "https://github.com/UnumID/Verifier-Client-SDK.git"\n')),Object(i.b)("h2",{id:"functionality"},"Functionality"),Object(i.b)("h3",{id:"create-presentationrequests"},"Create ",Object(i.b)("inlineCode",{parentName:"h3"},"PresentationRequests")),Object(i.b)("p",null,"By default, the SDK will create a ",Object(i.b)("inlineCode",{parentName:"p"},"PresentationRequest")," as soon as it is rendered. It will periodically regenerate the ",Object(i.b)("inlineCode",{parentName:"p"},"PresentationRequest")," (to ensure it doesn't expire) until the user shares data or declines the request, or the widget is unmounted. "),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"An Unum ID ",Object(i.b)(r.a,{type:"request",mdxType:"Tip"})," is what a company uses to request a ",Object(i.b)(r.a,{type:"presentation",mdxType:"Tip"})," from a user. The request is represented in code as a ",Object(i.b)("inlineCode",{parentName:"p"},"PresentationRequest")," object."))),Object(i.b)("p",null,"You can use different combinations of props (see below) to choose how much control you want to have. For example, instead of automatically creating a ",Object(i.b)("inlineCode",{parentName:"p"},"PresentationRequest")," on load, you may want to trigger its creation based on a user interaction like a button click."),Object(i.b)("h3",{id:"display-deep-links"},"Display Deep Links"),Object(i.b)("p",null,"PresentationRequests are shared to an Unum ID-powered mobile app a user's device via deep links. The Web SDK determines how it displays them based on the browser's userAgent."),Object(i.b)("h4",{id:"defaults"},"Defaults"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"QR Code:")," On non-mobile browsers, the SDK will default to displaying the deep link as a QR code (which a user scans with their mobile device)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Button:")," On mobile browsers, the SDK will default to displaying the deep link as a button.")),Object(i.b)("h4",{id:"fallbacks"},"Fallbacks"),Object(i.b)("p",null,"In some situations, neither a QR code nor a button is convenient, so the SDK uses fallback options in this order:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Push Notification:")," sends a push notification to the user's device."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"SMS:")," sends the user an SMS message containing the deep link, which they open on their mobile device."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Email"),": sends the user an email containing the deep link, which they open on their mobile device.")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Using all fallbacks allows you to handle the vast majority of edge cases:"),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Broken phone camera / doesn't know how to scan:")," ",Object(i.b)("br",null)," QR code \u2192 push notification"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Didn't accept / disabled push notifications:"),Object(i.b)("br",null)," push notification \u2192 SMS"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"No cell service:"),Object(i.b)("br",null)," SMS \u2192 email")))),Object(i.b)("p",null,"These are called fallbacks in part because they require some information about the user to work (unlike QR codes and buttons). To send push notifications, you need to provide a push notification identifier for the user. To send SMS messages, you need to provide a phone number for the user. And to send emails, you need to provide an email for the user."),Object(i.b)("p",null,"You may have this information stored in your database, associated with the user. If so, you can ask them to log into your existing account system, retrieve the necessary information, and then use the fallbacks options described above.We provide a ",Object(i.b)("inlineCode",{parentName:"p"},"goToLogin()")," function for this purpose."),Object(i.b)("h2",{id:"api-props"},"API Props"),Object(i.b)("p",null,"The SDK exports a single ",Object(i.b)("inlineCode",{parentName:"p"},"WidgetHostAndController")," component, which encapsulates all of the SDK's functionality."),Object(i.b)("h3",{id:"applicationtitle"},Object(i.b)("inlineCode",{parentName:"h3"},"applicationTitle")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"string")," "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"required")),Object(i.b)("li",{parentName:"ul"},"The name of your Unum ID powered mobile app.")),Object(i.b)("h3",{id:"userinfo"},Object(i.b)("inlineCode",{parentName:"h3"},"userInfo")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"UserInfo")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"required")),Object(i.b)("li",{parentName:"ul"},"Information about the user (push notification identifier, phone number, and/or email). "),Object(i.b)("li",{parentName:"ul"},"The SDK will use this to determine which fallback options are available.")),Object(i.b)("h3",{id:"presentationrequest"},Object(i.b)("inlineCode",{parentName:"h3"},"presentationRequest")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PresentationRequestResponse")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"optional")),Object(i.b)("li",{parentName:"ul"},"Created on your server with the ",Object(i.b)("a",{parentName:"li",href:"/server-sdk"},"Server SDK"),". "),Object(i.b)("li",{parentName:"ul"},"You may provide this prop in combination with setting ",Object(i.b)("inlineCode",{parentName:"li"},"createInitialPresentationRequest")," (below) to ",Object(i.b)("inlineCode",{parentName:"li"},"false")," for more control over when the widget should display a ",Object(i.b)("inlineCode",{parentName:"li"},"PresentationRequest")," to the user.")),Object(i.b)("h3",{id:"deeplinkimgsrc"},Object(i.b)("inlineCode",{parentName:"h3"},"deeplinkImgSrc")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"string")," "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"optional")),Object(i.b)("li",{parentName:"ul"},"Path to the image to display as a deep link button.")),Object(i.b)("h3",{id:"createinitialpresentationrequest"},Object(i.b)("inlineCode",{parentName:"h3"},"createInitialPresentationRequest")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"boolean")," "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"optional")," "),Object(i.b)("li",{parentName:"ul"},"Whether the widget should immediately call ",Object(i.b)("inlineCode",{parentName:"li"},"createPresentationRequest")," on load. "),Object(i.b)("li",{parentName:"ul"},"You can combine this with the ",Object(i.b)("inlineCode",{parentName:"li"},"presentationRequest")," prop to gain control over when the initial ",Object(i.b)("inlineCode",{parentName:"li"},"PresentationRequest")," is created. By default, it is ",Object(i.b)("inlineCode",{parentName:"li"},"false")," if you provide the ",Object(i.b)("inlineCode",{parentName:"li"},"presentationRequest")," prop and ",Object(i.b)("inlineCode",{parentName:"li"},"true")," if you do not.")),Object(i.b)("h3",{id:"createpresentationrequest"},Object(i.b)("inlineCode",{parentName:"h3"},"createPresentationRequest")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"() => Promise<PresentationRequestResponse> | void")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"optional")),Object(i.b)("li",{parentName:"ul"},"A function that should call your ",Object(i.b)("a",{parentName:"li",href:"/server-sdk"},"Server SDK")," to create a ",Object(i.b)("inlineCode",{parentName:"li"},"PresentationRequest"),". "),Object(i.b)("li",{parentName:"ul"},"If it returns a value, it's assumed that the value is a ",Object(i.b)("inlineCode",{parentName:"li"},"PresentationRequestResponse"),". If it doesn't return a value, you must provide the response via the ",Object(i.b)("inlineCode",{parentName:"li"},"presentationRequest")," prop in order for the widget to display the ",Object(i.b)("inlineCode",{parentName:"li"},"PresentationRequest"),". (As in a Redux application, where ",Object(i.b)("inlineCode",{parentName:"li"},"createPresentationRequest")," will probably be an async action creator of some sort.) "),Object(i.b)("li",{parentName:"ul"},"The SDK calls this function on an interval in order to ensure that it never displays an expired ",Object(i.b)("inlineCode",{parentName:"li"},"PresentationRequest"),".")),Object(i.b)("h3",{id:"sendemail"},Object(i.b)("inlineCode",{parentName:"h3"},"sendEmail")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"(options: EmailOptions) => Promise<SuccessResponse>")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"optional")),Object(i.b)("li",{parentName:"ul"},"A function that takes an ",Object(i.b)("inlineCode",{parentName:"li"},"EmailOptions")," object and calls your backend to send a deeplink via email. "),Object(i.b)("li",{parentName:"ul"},"You may use the ",Object(i.b)("inlineCode",{parentName:"li"},"sendEmail")," function from the Server SDK to send the email or your own email provider. "),Object(i.b)("li",{parentName:"ul"},"If this prop is not provided, the email fallback option will not be available.")),Object(i.b)("h3",{id:"sendsms"},Object(i.b)("inlineCode",{parentName:"h3"},"sendSms")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"(options: SmsOptions) => Promise<SuccessResponse>")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"optional")),Object(i.b)("li",{parentName:"ul"},"A function that takes an ",Object(i.b)("inlineCode",{parentName:"li"},"SmsOptions")," object and calls your backend to send a deeplink via SMS. "),Object(i.b)("li",{parentName:"ul"},"You may use the ",Object(i.b)("inlineCode",{parentName:"li"},"sendSMS")," function from the Server SDK to send the SMS or your own SMS provider. "),Object(i.b)("li",{parentName:"ul"},"If this prop is not provided, the SMS fallback option will not be available.")),Object(i.b)("h3",{id:"gotologin"},Object(i.b)("inlineCode",{parentName:"h3"},"goToLogin")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"() => void")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"optional")),Object(i.b)("li",{parentName:"ul"},"A function that redirects the user to your existing login page. "),Object(i.b)("li",{parentName:"ul"},"You should provide this if you are using Unum ID as an additional authentication factor on top of your existing login. - If this prop is not provided, the login fallback option will not be available.")),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)("h3",{id:"no-fallbacks"},"No Fallbacks"),Object(i.b)("p",null,"The simplest possible use case. It allows the SDK to handle all ",Object(i.b)("inlineCode",{parentName:"p"},"PresentationRequest")," creation, and does not provide any additional fallback options."),Object(i.b)(o.a,{groupId:"languages",defaultValue:"jsx",values:[{label:"JSX",value:"jsx"},{label:"TSX",value:"tsx"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"jsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import WidgetHostAndController from '@unumid/web-sdk';\n\n// Import an image to use for the (mobile) deep link button.\n// In this example, images are stored in an 'assets' directory. Your application may be different.\nimport deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\nconst App = () => {\n  const createPresentationRequest = async () => {\n    // Call your your Server SDK to create a PresentationRequest and return the response.\n  };\n\n  return (\n    <WidgetHostAndController\n      applicationTitle=\"My Application\"\n      userInfo={{}}\n      createPresentationRequest={createPresentationRequest}\n      deeplinkImgSrc={deeplinkImgSrc}\n    />\n  );\n};\n"))),Object(i.b)(s.a,{value:"tsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"import { FC } from 'react';\nimport WidgetHostAndController, { PresentationRequestResponse } from '@unumid/web-sdk';\n\n// Import an image to use for the (mobile) deep link button.\n// In this example, images are stored in an 'assets' directory. Your application may be different.\nimport deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\nconst App: FC = () => {\n  const createPresentationRequest = async (): Promise<PresentationRequestResponse> => {\n    // Call your Server SDK to create a PresentationRequest and return the response.\n  };\n\n  return (\n    <WidgetHostAndController\n      applicationTitle=\"My Application\"\n      userInfo={{}}\n      createPresentationRequest={createPresentationRequest}\n      deeplinkImgSrc={deeplinkImgSrc}\n    />\n  );\n};\n")))),Object(i.b)("h3",{id:"fallbacks-1"},"Fallbacks"),Object(i.b)("p",null,"A slightly more complex use case which allows the SDK to handle PresentationRequest creation, but enables fallback options."),Object(i.b)(o.a,{groupId:"languages",defaultValue:"jsx",values:[{label:"JSX",value:"jsx"},{label:"TSX",value:"tsx"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"jsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import WidgetHostAndController from '@unumid/web-sdk';\n\n// Import an image to use for the (mobile) deep link button.\n// In this example, images are stored in an 'assets' directory. Your application may be different.\nimport deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\nconst App = () => {\n  const createPresentationRequest = async () => {\n    // Call your Server SDK to create a PresentationRequest and return the response.\n  };\n\n  const sendEmail = async (options) => {\n    // Call your Server SDK to send a deep link via email and return the response.\n  };\n\n  const sendSms = async (options) => {\n    // Call your Server SDK to send a deep link via SMS and return the response.\n  };\n\n  const goToLogin = () => {\n    // Navigate to your login page.\n  };\n\n  return (\n    <WidgetHostAndController\n      applicationTitle=\"My Application\"\n      userInfo={{\n        email: 'mrplow@gmail.com', // The user's email is required to enable the email fallback.\n        phone: 'KL5-5555' // The user's phone number is required to enable the SMS fallback.\n      }}\n      createPresentationRequest={createPresentationRequest}\n      deeplinkImgSrc={deeplinkImgSrc}\n      sendEmail={sendEmail}\n      sendSms={sendSms}\n      goToLogin={goToLogin}\n    />\n  );\n};\n"))),Object(i.b)(s.a,{value:"tsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"import { FC } from 'React';\nimport WidgetHostAndController, {\n  EmailOptions,\n  SmsOptions,\n  PresentationRequestResponse,\n  SuccessResponse\n} from '@unumid/web-sdk';\n\n// Import an image to use for the (mobile) deeplink button.\n// In this example, images are stored in an 'assets' directory. Your application may be different.\nimport deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\nconst App: FC = () => {\n  const createPresentationRequest = async (): Promise<PresentationRequestResponse> => {\n    // Call your Server SDK to create a PresentationRequest and return the response.\n  };\n\n  const sendEmail = async (options: EmailOptions): Promise<SuccessResponse> => {\n    // Call your Server SDK to send a deep link via email and return the response.\n  };\n\n  const sendSms = async (options: SmsOptions): Promise<SuccessResponse> => {\n    // Call your Server SDK to send a deep link via SMS and return the response.\n  };\n\n  const goToLogin = (): void => {\n    // Navigate to your login page.\n  };\n\n  return (\n    <WidgetHostAndController\n      applicationTitle=\"My Application\"\n      userInfo={{\n        email: 'mrplow@gmail.com', // The user's email is required to enable the email fallback.\n        phone: 'KL5-5555' // The user's phone number is required to enable the SMS fallback.\n      }}\n      createPresentationRequest={createPresentationRequest}\n      deeplinkImgSrc={deeplinkImgSrc}\n      sendEmail={sendEmail}\n      sendSms={sendSms}\n      goToLogin={goToLogin}\n    />\n  );\n};\n")))),Object(i.b)("h3",{id:"controlled-request-creation"},"Controlled Request Creation"),Object(i.b)("p",null,"Gives your application more control over when the initial PresentationRequest is created. Enables fallback options."),Object(i.b)(o.a,{groupId:"languages",defaultValue:"jsx",values:[{label:"JSX",value:"jsx"},{label:"TSX",value:"tsx"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"jsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\nimport WidgetHostAndController from '@unumid/web-sdk';\n\n// Import an image to use for the (mobile) deep link button.\n// In this example, images are stored in an 'assets' directory. Your application may be different.\nimport deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\nconst App = () => {\n  // Save the PresentationRequest in local component state.\n  const [presentationRequest, setPresentationRequest] = useState();\n\n  const createPresentationRequest = async () => {\n    const options = {\n      // Customizable PresentationRequest options.\n      credentialRequests: [{\n        type: 'LoginCredential',\n        issuers: ['did:unum:5235d82e-5aac-4df4-adf2-7c6cc0cbec95']\n      }],\n      verifier: 'did:unum:a74fce7c-7dfa-4702-b85f-f68a854c3cfe'\n    };\n    // Call your Server SDK to create a PresentationRequest and save in the component state.\n    const response = await callBackend(options);\n    setPresentationRequest(response);\n  };\n\n  const sendEmail = async (options) => {\n    // Call your Server SDK to send a deep link via email and return the response.\n  };\n\n  const sendSms = async (options) => {\n    // Call your Server SDK to send a deep link via SMS and return the response.\n  };\n\n  const goToLogin = () => {\n    // Navigate to your login page.\n  };\n\n  return (\n    <WidgetHostAndController\n      applicationTitle=\"My Application\"\n      userInfo={{\n        email: 'mrplow@gmail.com', // The user's email is required to enable the email fallback.\n        phone: 'KL5-5555' // The user's phone number is required to enable the SMS fallback.\n      }}\n      presentationRequest={presentationRequest} // Provide the SDK with an already created PresentationRequest.\n      createInitialPresentationRequest={false} // Prevent the SDK from immediately creating a new PresentationRequest on load.\n      createPresentationRequest={createPresentationRequest} // We still need to provide the SDK with a createPresentationRequest function so that it can create a new PresentationRequest before the current one expires.\n      deeplinkImgSrc={deeplinkImgSrc}\n      sendEmail={sendEmail}\n      sendSms={sendSms}\n      goToLogin={goToLogin}\n    />\n  );\n};\n"))),Object(i.b)(s.a,{value:"tsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"import { FC, useState } from 'react';\nimport WidgetHostAndController, {\n  EmailOptions,\n  SmsOptions,\n  PresentationRequestResponse,\n  SuccessResponse\n} from '@unumid/web-sdk';\nimport { PresentationRequestOptions } from '@unumid/types';\n\n// Import an image to use for the (mobile) deeplink button.\n// In this example, images are stored in an 'assets' directory. Your application may be different.\nimport deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\nconst App: FC = () => {\n  // Save the PresentationRequest in local component state.\n  const [presentationRequest, setPresentationRequest] = useState();\n\n  const createPresentationRequest = async (): Promise<void> => {\n    const options = {\n      // Customizable PresentationRequest options.\n      credentialRequests: [{\n        type: 'LoginCredential',\n        issuers: ['did:unum:5235d82e-5aac-4df4-adf2-7c6cc0cbec95']\n      }],\n      verifier: 'did:unum:a74fce7c-7dfa-4702-b85f-f68a854c3cfe'\n    };\n    // Call your Server SDK to create a PresentationRequest and save in the component state.\n    const response = await callBackend(options);\n    setPresentationRequest(response);\n  };\n\n  const sendEmail = async (options: EmailOptions): Promise<SuccessResponse> => {\n    // Call your Server SDK to send a deep link via email and return the response.\n  };\n\n  const sendSms = async (options: SmsOptions): Promise<SuccessResponse> => {\n    // Call your Server SDK to send a deep link via SMS and return the response.\n  };\n\n  const goToLogin = (): void => {\n    // Navigate to your login page.\n  };\n\n  return (\n    <WidgetHostAndController\n      applicationTitle=\"My Application\"\n      userInfo={{\n        email: 'mrplow@gmail.com', // The user's email is required to enable the email fallback.\n        phone: 'KL5-5555' // The user's mobile phone number is required to enable the sms fallback.\n      }}\n      presentationRequest={presentationRequest} // Provide the Web SDK with an already-created PresentationRequest.\n      createInitialPresentationRequest={false} // Prevent the Web SDK from immediately creating a new PresentationRequest on load.\n      createPresentationRequest={createPresentationRequest} // We still need to provide the Web SDK with a createPresentationRequest function so that it can create a new PresentationRequest before the current one expires.\n      deeplinkImgSrc={deeplinkImgSrc}\n      sendEmail={sendEmail}\n      sendSms={sendSms}\n      goToLogin={goToLogin}\n    />\n  );\n};\n")))),Object(i.b)("h3",{id:"redux"},"Redux"),Object(i.b)("p",null,"Applications using Redux and other similar state management libraries have some unique challenges. Side effects like creating resources usually happen in action creator functions, which dispatch actions to the store rather than returning values. "),Object(i.b)("p",null,"In this example, we're providing the SDK with our ",Object(i.b)("inlineCode",{parentName:"p"},"createPresentationRequest")," action creator to call, then selecting the created ",Object(i.b)("inlineCode",{parentName:"p"},"PresentationRequest")," from the store to provide separately."),Object(i.b)(o.a,{groupId:"languages",defaultValue:"jsx",values:[{label:"JSX",value:"jsx"},{label:"TSX",value:"tsx"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"jsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import { useSelector } from 'react-redux';\nimport WidgetHostAndController from '@unumid/web-sdk';\n\n// Import your action creators. They have been wrapped in React hooks in this example, but your application may be different.\nimport { useActionCreators } from './hooks/actionCreators';\n\n// Import an image to use for the (mobile) deep link button.\n// In this example, images are stored in an 'assets' directory. Your application may be different.\nimport deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\nconst App = () => {\n  // These functions can be defined as async action creators using redux-thunk, redux-saga, or other libraries.\n  const { createPresentationRequest, sendSms, sendEmail } = useActionCreators();\n\n  // Select a previously created PresentationRequest from state.\n  const presentationRequest = useSelector(state => state.presentationRequest);\n\n  // Select the logged in user from state.\n  const loggedInUser = useSelector(state => state.loggedInUser);\n\n  const goToLogin = () => {\n    // Navigate to your login page.\n  };\n\n  return (\n    <WidgetHostAndController\n      applicationTitle=\"My Application\"\n      userInfo={{\n        email: loggedInUser.email, // The user's email is required to enable the email fallback.\n        phone: loggedInUser.mobilePhoneNumber // The user's  phone number is required to enable the SMS fallback.\n      }}\n      presentationRequest={presentationRequest} // Provide the  SDK with an already-created PresentationRequest.\n      createInitialPresentationRequest={true} // The SDK should immediately create a PresentationRequest on load.\n      createPresentationRequest={createPresentationRequest} // We still need to provide the SDK with a createPresentationRequest function so that it can create a new PresentationRequest before the current one expires.\n      deeplinkImgSrc={deeplinkImgSrc}\n      sendEmail={sendEmail}\n      sendSms={sendSms}\n      goToLogin={goToLogin}\n    />\n  );\n};\n"))),Object(i.b)(s.a,{value:"tsx",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"import { useSelector } from 'react-redux';\n\n import WidgetHostAndController '@unumid/web-sdk';\n\n // Import your action creators. They have been wrapped in React hooks in this example, but your application may be different.\n import { useActionCreators } from './hooks/actionCreators';\n\n // Import an image to use for the (mobile) deeplink button.\n // In this example, images are stored in an 'assets' directory. Your application may be different.\n import deeplinkImgSrc from '../assets/deeplink-button-image.png';\n\n const App = () => {\n   // These functions can be defined as async action creators using redux-thunk, redux-saga, or other libraries.\n   const { createPresentationRequest, sendSms, sendEmail } = useActionCreators();\n\n   // Select a previously created PresentationRequest from state.\n   const presentationRequest = useSelector(state => state.presentationRequest);\n\n   // Select the logged in user from state.\n   const loggedInUser = useSelector(state => state.loggedInUser);\n\n   const goToLogin = (): void => {\n     // Navigate to your login page.\n   };\n\n   return (\n     <WidgetHostAndController\n       applicationTitle=\"My Application\"\n       userInfo={{\n         email: loggedInUser.email, // The user's email is required to enable the email fallback.\n         phone: loggedInUser.mobilePhoneNumber // The user's  phone number is required to enable the SMS fallback.\n       }}\n       presentationRequest={presentationRequest} // Provide the SDK with an already-created PresentationRequest.\n       createInitialPresentationRequest={true} // The SDK should immediately create a PresentationRequest on load.\n       createPresentationRequest={createPresentationRequest} // We still need to provide the SDK with a createPresentationRequest function so that it can create a new PresentationRequest before the current one expires.\n       deeplinkImgSrc={deeplinkImgSrc}\n       sendEmail={sendEmail}\n       sendSms={sendSms}\n       goToLogin={goToLogin}\n     />\n   );\n };\n")))))}d.isMDXComponent=!0}}]);