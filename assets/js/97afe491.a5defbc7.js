"use strict";(self.webpackChunkunum_id=self.webpackChunkunum_id||[]).push([[582],{5162:(e,a,t)=>{t.d(a,{Z:()=>r});var n=t(7294),l=t(6010);const i="tabItem_Ymn6";function r(e){let{children:a,hidden:t,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(i,r),hidden:t},a)}},5488:(e,a,t)=>{t.d(a,{Z:()=>m});var n=t(7462),l=t(7294),i=t(6010),r=t(2389),o=t(7392),s=t(7094),u=t(2466);const d="tabList__CuJ",c="tabItem_LNqP";function h(e){var a,t;const{lazy:r,block:h,defaultValue:m,values:p,groupId:b,className:v}=e,k=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=p?p:k.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),f=(0,o.l)(g,((e,a)=>e.value===a.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===m?m:null!=(a=null!=m?m:null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)?a:k[0].props.value;if(null!==w&&!g.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:D,setTabGroupChoices:N}=(0,s.U)(),[y,I]=(0,l.useState)(w),C=[],{blockElementScrollPositionUntilNextRender:W}=(0,u.o5)();if(null!=b){const e=D[b];null!=e&&e!==y&&g.some((a=>a.value===e))&&I(e)}const S=e=>{const a=e.currentTarget,t=C.indexOf(a),n=g[t].value;n!==y&&(W(a),I(n),null!=b&&N(b,String(n)))},T=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{var n;const a=C.indexOf(e.currentTarget)+1;t=null!=(n=C[a])?n:C[0];break}case"ArrowLeft":{var l;const a=C.indexOf(e.currentTarget)-1;t=null!=(l=C[a])?l:C[C.length-1];break}}null==(a=t)||a.focus()};return l.createElement("div",{className:(0,i.Z)("tabs-container",d)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":h},v)},g.map((e=>{let{value:a,label:t,attributes:r}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===a?0:-1,"aria-selected":y===a,key:a,ref:e=>C.push(e),onKeyDown:T,onFocus:S,onClick:S},r,{className:(0,i.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":y===a})}),null!=t?t:a)}))),r?(0,l.cloneElement)(k.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==y})))))}function m(e){const a=(0,r.Z)();return l.createElement(h,(0,n.Z)({key:String(a)},e))}},3037:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=t(7462),l=(t(7294),t(3905));t(5488),t(5162),t(7874),t(106);const i={id:"mobile-webwallet-sdk-android",title:"Mobile WebWallet SDK - Android",sidebar_label:"Android WebWallet",slug:"/mobile-webwallet-sdk-android"},r=void 0,o={unversionedId:"mobile-webwallet-sdk-android",id:"mobile-webwallet-sdk-android",title:"Mobile WebWallet SDK - Android",description:"Docs for the iOS WebWallet SDK are here.",source:"@site/docs/mobile-webwallet-sdk-android.mdx",sourceDirName:".",slug:"/mobile-webwallet-sdk-android",permalink:"/mobile-webwallet-sdk-android",draft:!1,tags:[],version:"current",frontMatter:{id:"mobile-webwallet-sdk-android",title:"Mobile WebWallet SDK - Android",sidebar_label:"Android WebWallet",slug:"/mobile-webwallet-sdk-android"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Minimum Requirements",id:"minimum-requirements",level:3},{value:"Installation",id:"installation",level:3},{value:"Activating a user",id:"activating-a-user",level:3},{value:"Has Matching Credentials",id:"has-matching-credentials",level:3},{value:"Verifying a user",id:"verifying-a-user",level:3}],d={toc:u};function c(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Docs for the iOS WebWallet SDK are ",(0,l.kt)("a",{parentName:"em",href:"mobile-webwallet-sdk-ios"},"here"),".")),(0,l.kt)("p",null,"This is a lightweight, fully native SDK that allows a host app to perform web wallet authentication and verification of a user. It works with both Kotlin and Java native apps."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"An example project using this SDK can be found ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/UnumID/UnumIdWebAuth-Android/"},"here"),". This serves as a useful technical reference.")),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("h3",{id:"minimum-requirements"},"Minimum Requirements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Android 6.0 (Marshmallow) and above"))),(0,l.kt)("h3",{id:"installation"},"Installation"),(0,l.kt)("p",null,"In the app level build.gradle add the following maven repository:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-groovy"},'\nandroid {\n    repositories {\n        maven {\n            name = "GitHubPackages"\n            url = uri("https://maven.pkg.github.com/UnumID/UnumIDWebWallet-android")\n        }\n    }\n\n   ......\n')),(0,l.kt)("p",null,"In the app level build.gradle add the reference to the SDK"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-groovy"},'implementation "id.unum:verified-android:(insert latest version)"\n')),(0,l.kt)("p",null,"For the most current version, visit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/UnumID/UnumIDWebWallet-android/packages/1757162"},"here")),(0,l.kt)("h3",{id:"activating-a-user"},"Activating a user"),(0,l.kt)("p",null,"When a host application would like to activate a user with the UnumID Web Wallet Verification SDK, then the 'launchActivate' method will be called. An ",(0,l.kt)("inlineCode",{parentName:"p"},"IssueCredentialsRequest")," object will also need to be provided to the endpoint. This will let the SDK know what credentials should be assigned to the user being activated."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n     * Method called to launch the activate dialog flow.\n     * @param issueCredentialsRequest - credential request\n     * @param brand - The name of the client brand\n     * @param callback - callback to be called once the dialog is closed\n     */\n    fun launchActivate(\n        issueCredentialsRequest: IssueCredentialsRequest,\n        brand: String,\n        callback: UnumDialogComplete\n    )\n")),(0,l.kt)("h3",{id:"has-matching-credentials"},"Has Matching Credentials"),(0,l.kt)("p",null,"The host application can check to see if a user has existing credentials already associated with the UnumID SDK. To do this, call the ",(0,l.kt)("inlineCode",{parentName:"p"},"hasMatchingCredentials")," function. If there are matching credentials, the response will contain a url that can then be passed to the ",(0,l.kt)("inlineCode",{parentName:"p"},"launchVerify")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n     * Method called to check if there are matching credentials for the given email and phone.\n     * @param brand - The name of the client brand\n     * @param showDialog - if a dialog should be shown to the user\n     * @param callback - callback results\n     * @param request - api request body\n     */\n    fun hasMatchingCredentials(\n        brand: String,\n        showDialog: Boolean,\n        callback: UnumDialogComplete,\n        request: HasMatchingCredentialsRequest,\n    )\n")),(0,l.kt)("h3",{id:"verifying-a-user"},"Verifying a user"),(0,l.kt)("p",null,"When the host application would like to verify a user, then the following function can be called."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"/**\n     * Method called to launch the Verification View.\n     * @param url - url to be loaded\n     * @param brand - The name of the client brand\n     * @param callback - callback to be called once the dialog is closed\n     * @param showDialog - whether to show the preliminary dialog or not\n     */\n    fun launchVerify(\n        url: String,\n        brand: String,\n        callback: UnumDialogComplete,\n        showDialog: Boolean = false // default value\n    )\n")))}c.isMDXComponent=!0}}]);