"use strict";(self.webpackChunkunum_id=self.webpackChunkunum_id||[]).push([[829],{3166:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>W,contentTitle:()=>R,default:()=>B,frontMatter:()=>M,metadata:()=>P,toc:()=>V});var n=a(7462),i=a(7294),r=a(3905),s=(a(7874),a(106)),l=a(8716),o=a(624),m=a(1190);const c="container__ccj",d="search_dnlB",p="container-grid_gdNR",h="list-card_xwza",u="list-card-skeleton_i4sb",f="list-card-title_cv_5",N="container_Yx8b",y="back_YMET",k="header_qWYl",v="title_tglL",g="subtitle_n5yt",C="meta-container_AWlX",E="properties_IZUr",b="property-title_jUnQ",w="properties-container_ik0p",S="property-field_GOOn",x=/([A-Z][a-z0-9]+)/gm,j=e=>e.split(x).filter((e=>e)).join(" "),F=e=>Object.keys(e).reduce(((e,t)=>({...e,[t]:t})),{});function _(e){let{field:t,value:a}=e;return i.createElement("strong",null,i.createElement("span",{className:"text--capitalize"},j(t),":"),i.createElement("span",{className:"margin-left--sm"},"object"==typeof a&&Array.isArray(a)?i.createElement(i.Fragment,null,a.map((e=>i.createElement("p",{key:e,className:"padding-left--md margin-bottom--sm margin-top--md"},i.createElement("span",null,"- "),i.createElement("span",{className:"text--primary"},e))))):i.createElement("span",{className:"text--primary"},String(a))))}function I(e){let{schema:t}=e;return Object.entries(t.properties).length?i.createElement(i.Fragment,null,i.createElement("h5",{className:`${g} margin-top--lg`},"Properties"),i.createElement("div",{className:w},(()=>{const e=Object.entries(t.properties);return e.length?e.map((e=>{var a,n;let[r,s]=e;const l=F(s),o=t.required.includes(r);((null==t||null==(a=t.raw)||null==(n=a.attributes)?void 0:n.attributes)??[]).find((e=>e.key===r));return i.createElement("div",{key:r,className:`${S} table-of-contents__left-border padding-left--lg`},i.createElement("h6",{className:b},i.createElement("span",null,j(r))," - ",i.createElement("i",{className:"text--primary"},o?"Required":"Optional")),i.createElement("div",{className:`${E} table-of-contents__left-border`},Object.entries(s).map((e=>{let[t,a]=e;return i.createElement("div",{key:t},i.createElement(_,{field:l[t],value:a}))}))))})):null})())):null}function O(e){let{schema:t,onRequestClose:a}=e;const[n,r]=(0,i.useState)(!1),s=F(t);return(0,i.useEffect)((()=>{const e=setTimeout((()=>r(!1)),3e3);return()=>{clearTimeout(e)}}),[n]),i.createElement(l.E.div,{key:t.id,className:`${N} --ifm-modal-overlay`,initial:{opacity:0},animate:{opacity:1},exit:{opacity:0}},i.createElement("div",{className:"margin-top--sm padding--lg"},i.createElement("button",{className:`${y} button button--md button--primary margin-bottom--lg`,onClick:a}),i.createElement("div",{className:k},i.createElement("button",{className:"button button--xs button--secondary",onClick:()=>{navigator.clipboard.writeText(JSON.stringify(t.raw,null,2)),r(!0)}},n?"Copied!":"Copy schema"),i.createElement("h4",{className:v},i.createElement(l.E.span,{layoutId:t.id,className:"margin-right--md",style:{display:"inline-block"}},t.name))),i.createElement("p",null,t.id),i.createElement(l.E.div,{initial:{opacity:0},animate:{opacity:1,transition:{delay:.3}},exit:{opacity:0}},i.createElement("div",{className:C},i.createElement(_,{field:s.additionalProperties,value:t.additionalProperties?"yes":"no"}),i.createElement(_,{field:s.type,value:t.type})),i.createElement(I,{schema:t}))))}function T(){return{async getSchemas(){return await(e="https://schema.verified.inc/schema",t={method:"GET",mode:"cors"},fetch(e,t).then((e=>{if(e.ok)return e.json();throw new Error(`Http response error: ${e.status}`)})));var e,t}}}function J(e){let[t,a]=e;const{json:n}=a,{$id:i,...r}=n;return[t,{...r,id:t,name:j(i),raw:a}]}const L=(e,t)=>e.toLocaleString().localeCompare(t);function $(e){let{schema:t,onSchemaSelect:a}=e;const n={hidden:{opacity:0},show:{opacity:1},[`selected-${t.id}`]:{backgroundColor:"var(--ifm-color-primary)"},idle:{opacity:1,transition:{duration:0}},exit:{opacity:0}};return i.createElement(l.E.div,{key:t.id,className:h,variants:n,whileHover:{backgroundColor:"var(--ifm-color-primary)"},onClick:()=>a(t),layout:!0},i.createElement(l.E.h3,{layoutId:t.id,className:f},t.name))}function D(){return i.createElement("div",{className:u})}function q(e){let{schemas:t}=e;const[a,n]=(0,i.useState)(null),[r,s]=(0,i.useState)(""),h=(0,i.useRef)(),[u,f]=(0,i.useState)("auto"),[N,y]=(0,i.useState)(0),k=(0,o.Y)(h,{amount:"some"}),[v,g]=(0,i.useState)(k),C=Object.entries(t).map(J).filter((e=>t=>{let[a]=t;return j(a).toLowerCase().indexOf(e.toLowerCase())>=0})(r)).sort(L),E=(0,i.useMemo)((()=>a?`selected-${a.id}`:v?"idle":k?"show":void 0),[a,k,v]);return(0,i.useEffect)((()=>{v||k&&g(!0)}),[k,v]),(0,i.useEffect)((()=>{const e=new ResizeObserver((e=>{const t=e[0].contentRect.height;y((e=>Math.max(e,t))),f(t)}));return e.observe(h.current),()=>{e.disconnect()}}),[]),i.createElement(l.E.div,{className:c,animate:{height:a?N:u,transition:{duration:.2}},layout:!0},i.createElement(l.E.div,{ref:h},i.createElement(l.E.div,{variants:{hidden:{},show:{transition:{staggerChildren:.025}},selected:{},idle:{}},initial:"hidden",animate:E,whileInView:"show",viewport:{once:!0,margin:"-50%"}},i.createElement("input",{className:d,placeholder:"Search for a schema e.g Email Credential",onChange:e=>s(e.target.value)}),!C.length&&i.createElement("h2",{className:"text--center margin-top--lg margin-bottom--lg"},"No schema found with term ",r),i.createElement(l.E.div,{className:p},i.createElement(m.M,null,C.map((e=>{let[t,a]=e;return i.createElement($,{key:t,schema:a,onSchemaSelect:n})}))))),i.createElement(m.M,{initial:!1},a&&i.createElement(O,{schema:a,onRequestClose:()=>n(null)}))))}function A(e){const[t,a]=(0,i.useState)(!0),[n,r]=(0,i.useState)(null);return(0,i.useEffect)((()=>{a(!0),T().getSchemas().then((e=>{r(e),a(!1)}))}),[]),t?i.createElement("div",{className:c},i.createElement("div",{className:p},new Array(28).fill(void 0).map(((e,t)=>i.createElement(D,{key:t}))))):i.createElement(q,{schemas:n})}const M={id:"schema",title:"Data Schemas",sidebar_label:"Data Schemas",slug:"/schema"},R=void 0,P={unversionedId:"schema",id:"schema",title:"Data Schemas",description:"Introduction",source:"@site/docs/schema.mdx",sourceDirName:".",slug:"/schema",permalink:"/schema",draft:!1,tags:[],version:"current",frontMatter:{id:"schema",title:"Data Schemas",sidebar_label:"Data Schemas",slug:"/schema"},sidebar:"sidebar",previous:{title:"API",permalink:"/api-overview"},next:{title:"1-Click or Free IDV",permalink:"/1-click-or-free-use-case"}},W={},V=[{value:"Introduction",id:"introduction",level:2},{value:"Schema Definitions",id:"schema-definitions",level:2},{value:"JSON Schema",id:"json-schema",level:4},{value:"Schema Library",id:"schema-library",level:2},{value:"Example",id:"example",level:2}],Z={toc:V};function B(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},Z,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Verified Inc. enables securely sharing verified ",(0,r.kt)("a",{href:"/terminology#credential"},(0,r.kt)(s.Z,{type:"credential",mdxType:"Tip"}))," data amongst network participants. While in theory this data can take any shape, a structured schema must be defined and followed for every credential type for the sake of all network participants."),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON Schema")," syntax for data validation purposes via a pre-compiled ",(0,r.kt)("a",{parentName:"p",href:"https://ajv.js.org/guide/why-ajv.html"},"AJV")," engine. This ensures our credential schemas are robust enough to encapsulate any data while still being easily described, displayed, and validated."),(0,r.kt)("h2",{id:"schema-definitions"},"Schema Definitions"),(0,r.kt)("p",null,"You can view all of the Verified Inc. defined credential schemas via ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/schema"},"https://schema.verified.inc/schema"),". If you want to know the schema for a particular credential type you can use that same url with the desired credential type in the path. For example, ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/schema/EmailCredential"},"https://schema.verified.inc/schema/EmailCredential"),", would yield the EmailCredential's schema information."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"We have this API documented via our public ",(0,r.kt)("a",{parentName:"p",href:"https://api.docs.verified.inc/"},"Postman collection")," documentation under ",(0,r.kt)("strong",{parentName:"p"},"Schema Resolver"),"."),(0,r.kt)("p",{parentName:"admonition"},"It is possible to view the response bodies from ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/schema"},"https://schema.verified.inc/schema")," in the browser, but we recommend Postman, which automatically formats the JSON response for human readability.")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"We hope to soon make it possible for you as a ",(0,r.kt)("a",{href:"/terminology#customer"},(0,r.kt)(s.Z,{type:"customer",mdxType:"Tip"}))," to define your own credential schemas. But ",(0,r.kt)("strong",{parentName:"p"},"currently, we Verified Inc. define all credential schemas.")," If you would like a new credential schema for your use case, please let us know and we will gladly define one for you.")),(0,r.kt)("p",null,'We currently are support what can be referred to as "single attribute atomic credentials". This means that we break data into its simplest form for every credential. This is to provide users a means of selective disclosure for ',(0,r.kt)("a",{href:"/terminology#request"},(0,r.kt)(s.Z,{type:"request",mdxType:"Tip"})),"s with optional fields."),(0,r.kt)("p",null,'We also support composite credentials, which are credentials that contain multiple "Atomic Credentials". For example, the ',(0,r.kt)("inlineCode",{parentName:"p"},"FullNameCredential")," contains ",(0,r.kt)("inlineCode",{parentName:"p"},"FirstNameCredential"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LastNameCredential")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MiddleNameCredential"),"."),(0,r.kt)("h4",{id:"json-schema"},"JSON Schema"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"/jsonSchema")," path will return the JSON schema definition, e.g. ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/jsonSchema/FirstNameCredential"},"https://schema.verified.inc/jsonSchema/FirstNameCredential"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example FirstNameCredential JSON Schema"',title:'"Example',FirstNameCredential:!0,JSON:!0,'Schema"':!0},'{\n  "$id": "FirstNameCredential",\n  "type": "object",\n  "properties": {\n    "firstName": {\n      "description": "A person\'s first name",\n      "examples": ["John", "Mary Kate"],\n      "title": "First Name",\n      "displayFormat": "String",\n      "type": "string"\n    }\n  },\n  "required": ["firstName"]\n}\n')),(0,r.kt)("p",null,"For composite credential schemas, the object will contain a ",(0,r.kt)("inlineCode",{parentName:"p"},"allOf")," property, which is an array of the atomic credential schemas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Example FullNameCredential JSON Schema"',title:'"Example',FullNameCredential:!0,JSON:!0,'Schema"':!0},'{\n  "$id": "FullNameCredential",\n  "type": "object",\n  "allOf": [\n    {\n      "$ref": "FirstNameCredential"\n    },\n    {\n      "$ref": "LastNameCredential"\n    },\n    {\n      "$ref": "MiddleNameCredential"\n    }\n  ]\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Note that each attribute has a ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"examples")," to help you understand the credential's schema. If you need more detailed information, look at our open source ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UnumID/schema-sdk"},"schema-sdk")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UnumID/schema-sdk/blob/main/src/formats.ts"},"formats"),".")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"$ref")," property is a JSON Pointer, which is a string containing a URI fragment identifier. In this case, it is a reference to another schema. This is how we define composite credential schemas.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"It's important to note that each of these credentials inside ",(0,r.kt)("inlineCode",{parentName:"p"},"FullNameCredential")," are Atomic Credentials, so you are able to request individually.\nBut if you need create or request a ",(0,r.kt)("inlineCode",{parentName:"p"},"CityCredential")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"StateCredential")," you will need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"AddressCredential"),", because you can mismatch the data.")),(0,r.kt)("h2",{id:"schema-library"},"Schema Library"),(0,r.kt)("p",null,"Search for or select a schema, see its properties and attributes, and copy the schema JSON:"),(0,r.kt)(A,{mdxType:"Schemas"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"First, we get the JSON schemas for the ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/jsonSchema/SsnCredential"},(0,r.kt)("inlineCode",{parentName:"a"},"SsnCredential")),", ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/jsonSchema/FullNameCredential"},(0,r.kt)("inlineCode",{parentName:"a"},"FullNameCredential")),", which contains ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/jsonSchema/FirstNameCredential"},(0,r.kt)("inlineCode",{parentName:"a"},"FirstNameCredential"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://schema.verified.inc/jsonSchema/LastNameCredential"},(0,r.kt)("inlineCode",{parentName:"a"},"LastNameCredential"))," and review their attributes' ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"examples"),"."),(0,r.kt)("p",null,"Next, we construct valid credential bodies, according to the schemas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/*The credential data compliant with the Ssn, FullName (FirstName and LastName) Credentials schemas*/\nconst credentialsList: Credentials = [\n  {\n    type: 'SsnCredential',\n    data: {\n      ssn: '333224444',\n    },\n  },\n  {\n    type: 'FullNameCredential',\n    data: [\n      {\n        type: 'FirstNameCredential',\n        data: {\n          firstName: 'John',\n        },\n      },\n      {\n        type: 'LastNameCredential',\n        data: {\n          lastName: 'Doe',\n        },\n      },\n    ],\n  },\n];\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example Request Body for Issuing Credentials"',title:'"Example',Request:!0,Body:!0,for:!0,Issuing:!0,'Credentials"':!0},'{\n  "credentials": credentialsList, // a list of one or more Credentials objects\n  "email": "richard.hendricks@pipedpiper.net"\n}\n\n')))}B.isMDXComponent=!0}}]);