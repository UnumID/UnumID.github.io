(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return u}));var i=n(3),r=n(7),s=(n(0),n(90)),a={id:"server-sdk",title:"Server SDK",sidebar_label:"Server SDK",slug:"/server-sdk"},o={unversionedId:"server-sdk",id:"server-sdk",isDocsHomePage:!1,title:"Server SDK",description:"This SDK combines the functionality of an Issuer and Verifier entity to work with UnumID's SaaS.",source:"@site/docs/server-sdk.mdx",slug:"/server-sdk",permalink:"/server-sdk",version:"current",sidebar_label:"Server SDK",sidebar:"sidebar",previous:{title:"Usage Guide",permalink:"/"},next:{title:"Mobile SDK - Android",permalink:"/mobile-sdk-android"}},d=[{value:"Issuer",id:"issuer",children:[]},{value:"Verifier",id:"verifier",children:[{value:"Distribution",id:"distribution",children:[]},{value:"Global Dependencies",id:"global-dependencies",children:[]}]},{value:"Logging",id:"logging",children:[]},{value:"SDK functionality",id:"sdk-functionality",children:[{value:"Issuer",id:"issuer-1",children:[]},{value:"Verifier",id:"verifier-1",children:[]}]}],l={toc:d};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"This SDK combines the functionality of an ",Object(s.b)("strong",{parentName:"p"},"Issuer")," and ",Object(s.b)("strong",{parentName:"p"},"Verifier")," entity to work with UnumID's SaaS."),Object(s.b)("h2",{id:"issuer"},"Issuer"),Object(s.b)("p",null,"The Issuer functionality is used by a customer acting as an Issuer. It allows one to register Issuers and perform actions such as issuing and revoking Credentials."),Object(s.b)("h2",{id:"verifier"},"Verifier"),Object(s.b)("p",null,"The Verifier functionality is used by a customer acting as a verifier. It allows one to register verifiers. Most importantly, it allows one to send PresentationRequests and verify Presentations."),Object(s.b)("h3",{id:"distribution"},"Distribution"),Object(s.b)("p",null,"Currently this project is still closed source, so standard distribution options via public source code or NPM repository are not viable. In downstream projects are leveraging this project via it's git url using Docker Buildkit to provide SSH credentials for access to this Github source code repo. An example of such a buildkit configuration can be found in the ",Object(s.b)("a",{parentName:"p",href:"https://github.com/UnumID/hooli-demo-server"},"hooli-demo-server")," ",Object(s.b)("inlineCode",{parentName:"p"},"Dockerfile")," and ",Object(s.b)("inlineCode",{parentName:"p"},".circleci/config.yaml"),"."),Object(s.b)("p",null,"We considered opting to build and push as a private module through a private Github NPM repo. However due to the complexities of configuring a downstream project to have rights to pull from the private NPM repo we have opted to not add pushing a private package to our CI job. "),Object(s.b)("p",null,"Soon, we hope to open source this project and uploaded the package as public NPM module.  "),Object(s.b)("h3",{id:"global-dependencies"},"Global Dependencies"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"NodeJS v14.0.0 or higher, preferably v14.15.0 or higher"),Object(s.b)("li",{parentName:"ul"},"yarn")),Object(s.b)("h2",{id:"logging"},"Logging"),Object(s.b)("p",null,"One can set the log level via the env var LOG_LEVEL. It defaults to info. Set to debug for more information, i.e. LOG_LEVEL=debug."),Object(s.b)("p",null,"We are using standard NPM log levels. More details on the various log levels ",Object(s.b)("a",{parentName:"p",href:"https://github.com/winstonjs/winston#logging-levels"},"here"),"."),Object(s.b)("p",null,"The logs default to stdout so can be aggregated using any log provider you would like from disk."),Object(s.b)("h2",{id:"sdk-functionality"},"SDK functionality"),Object(s.b)("p",null,"The Server SDK uses the UnumDto type to facilitate handling many response body types while providing a reliable structure to access the result."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"UnumDto")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"authToken: string; // The JWT auth token which is used by the SDK to authenticate with UnumID's SaaS. This is periodically refreshed thus its value should be read and stored in every resultant function call. \nbody: T; // The placeholder for the function's response type is function specific. \n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Authentication"),"\nEvery request detailed below requires a preceding Bearer ",Object(s.b)("inlineCode",{parentName:"p"},"authToken")," as a first parameter which is used to authenticate request to UnumID's SaaS on your behalf. As mention above this auth token updated upon every subsequent function call and should be read via the ",Object(s.b)("inlineCode",{parentName:"p"},"authToken")," attribute and persisted accordingly for later requests. "),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Errors"),"\nErrors returned by UnumID's SaaS will also be wrapped in the UnumDto object so that the (potentially) updated ",Object(s.b)("inlineCode",{parentName:"p"},"authToken")," can be retrieved. Validation errors which are created prior to any internal calls to UnumID's SaaS will however simply by of type Error and are thrown. This is due to never making a network call with the provided authToken so no (potential) new token to pass back."),Object(s.b)("h3",{id:"issuer-1"},"Issuer"),Object(s.b)("h4",{id:"registerissuer"},"registerIssuer"),Object(s.b)("p",null,"Register an issuer corresponding to your customer UUID and issuer API key provided by UnumID's SaaS. As a customer, you can register as many issuers as you like (or none at all), depending on your use case. Note, however, that you'll need a unique issuer API key for each one."),Object(s.b)("p",null,"You should store the DID (",Object(s.b)("inlineCode",{parentName:"p"},"did"),") and encryption and signing key pairs (",Object(s.b)("inlineCode",{parentName:"p"},"keys"),") that this returns. You'll need these to issue credentials to users."),Object(s.b)("p",null,"Parameters:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'"name": string, // a human-readable name for the Issuer. It will be displayed to users in the Holder when Credentials from the Issuer are created.\n"customerUuid": string, // your Unum ID customer uuid\n"apiKey": string // a unique Issuer API key obtained from Unum ID\n')),Object(s.b)("p",null,"Response Body: ",Object(s.b)("strong",{parentName:"p"},"RegisteredIssuer")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'{\n  "uuid": string, // identifies the new Issuer in the Unum ID database\n  "customerUuid": string, // identifies the customer which Created the Issuer\n  "did": string, // identifies the Issuer in the Unum ID decentralized ecosystem\n  "name": string, // a human-readable name for the Issuer\n  "createdAt": string, // the date and time the Issuer was registered\n  "updatedAt": string, // the date and time the Issuer was last updated\n  "keys": {\n    "signing": {\n      "privateKey": string, // your Issuer Signing Private Key. You will need to provide it in order to issue Credentials\n      "publicKey": string, // your Issuer Signing Public Key. It is also stored in the Issuer\'s DID Document, and can be used by other entities in the Unum ID ecosystem to verify the Issuer\'s signature on Credentials it issues.\n    }\n  }\n}\n')),Object(s.b)("h4",{id:"issuecredential"},"issueCredential"),Object(s.b)("p",null,"Issue a credential to a subject (user)."),Object(s.b)("p",null,"You need to provide your issuer DID (created when you registered), as well as your signing and encryption private keys, which the Issuer uses to sign and encrypt the credential. You need to specify a credentialType, which verifiers will use to later request the credential from the user."),Object(s.b)("p",null,"This returns a credential ",Object(s.b)("inlineCode",{parentName:"p"},"id")," that you should store so you can later revoke the credential if need be. We would recommend storing the entire credential indexed on the resultant credential ",Object(s.b)("inlineCode",{parentName:"p"},"id"),". Note that there are also id fields within credentialSubject and credentialStatus, but these are different. They refer to the subject DID and credential status identifier, respectively."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Important"),": The private keys never leave your app. This function, like all the others in this SDK, needs them in order to handle to cryptographic functionality on your behalf."),Object(s.b)("p",null,"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'"credentialSubject": {\n  "id": string, // a DID identifying the Subject of the Credential\n  [key: string]: any, // any number of claims about the subject, expressed as key-value pairs\n},\n"type": string || string[], // The Credential type(s)\n"issuer": string, // DID identifying the Issuer issuing the Credential\n"expirationDate": string, // date and time after which the Credential will no longer be valid\n"eccPrivateKey": string // your Issuer\'s Private Key\n')),Object(s.b)("p",null,"Response Body: ",Object(s.b)("strong",{parentName:"p"},"Credential")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'{\n    "@context": ["https://www.w3.org/2018/credentials/v1"], // this field is specified in the W3C Verifiable Credential spec\n    "credentialStatus": {\n        "id": string, // a url from which the Credential\'s status can be checked or updated\n        "type": "CredentialStatus"\n    },\n    "credentialSubject": {\n        "id": string, // a DID identifying the Subject of the Credential\n        [key: string]: any, // any number of claims about the subject, expressed as key-value pairs\n    },\n    "issuer": string, // DID identifying the Issuer that issued the Credential\n    "type": string[], // the Credential type(s)\n    "id": string, // a version 4 UUID uniquely identifying the Credential\n    "issuanceDate": string, // the date and time at which the credential was issued\n    "expirationDate": string, // date and time after which the Credential will no longer be valid\n    "proof": Proof // a cryptographic proof created by signing the Credential with the Issuer\'s Private Key. It can be used to verify the authenticity of the Credential.\n}\n')),Object(s.b)("h4",{id:"revokecredential"},"revokeCredential"),Object(s.b)("p",null,"Revoke a credential, i.e. make it invalid."),Object(s.b)("p",null,"You need to provide the credential ",Object(s.b)("inlineCode",{parentName:"p"},"id")," (created when you issued the credential)."),Object(s.b)("p",null,"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'{\n  "credentialId": string // id of the Credential to revoke\n}\n')),Object(s.b)("p",null,"Response Body: Empty\nIf unsuccessful and exception will be thrown."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"{}\n")),Object(s.b)("h3",{id:"verifier-1"},"Verifier"),Object(s.b)("h4",{id:"registerverifier"},"registerVerifier"),Object(s.b)("p",null,"Register a verifier corresponding to your customer UUID and verifier API key that UnumID's SaaS provides. As a customer, you can register as many verifiers as you like (or none at all), depending on your use case. Note, however, that you'll need a unique verifier API key for each one."),Object(s.b)("p",null,"You should store the DID (",Object(s.b)("inlineCode",{parentName:"p"},"did"),") and signing key pair (",Object(s.b)("inlineCode",{parentName:"p"},"keys"),") that this returns. You'll need these to create requests for (presentations of) credentials from users."),Object(s.b)("p",null,"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'"name": string, // a human-readable name for the verifier. It will be displayed to users in the Holder when receiving a PresentationRequest.\n"customerUuid": string, // your Unum ID customer uuid\n"apiKey": string // a unique Verifier API key obtained from Unum ID\n')),Object(s.b)("p",null,"Response body: ",Object(s.b)("strong",{parentName:"p"},"RegisteredVerifier")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'{\n  "uuid": string, // identifies the new Verifier in the Unum ID database\n  "customerUuid": string, // identifies the customer which Created the Verifier\n  "did": string, // identifies the Verifier in the Unum ID decentralized ecosystem\n  "name": string, // a human-readable name for the Verifier\n  "createdAt": string, // the date and time the Verifier was registered\n  "updatedAt": string, // the date and time the Verifier was last updated\n  "keys": {\n    "signing": {\n      "privateKey": string, // your Verifier Signing Private Key. You will need to provide it in order to send PresentationRequests\n      "publicKey": string, // your Verifier Signing Public Key. It is also stored in the Verifiers DID Document, and can be used by other entities in the Unum ID ecosystem to verify the Verifier\'s signature on PresentationRequests it creates\n    }, "encryption": {\n      "privateKey": string, // your Verifier Encryption Private Key. You will need to provide it in order to send PresentationRequests\n      "publicKey": string, // your Verifier Encryption Public Key. It is also stored in the Verifiers DID Document, and can be used by other entities in the Unum ID ecosystem to encrypt presentations for the Verifier to verifier.\n    }\n  }\n}\n')),Object(s.b)("h4",{id:"sendrequest"},"sendRequest"),Object(s.b)("p",null,"Create a request for (a presentation of) credentials from a user."),Object(s.b)("p",null,"You need to provide your verifier DID (created when you registered) and the UUID of the holder app from which the user can share the data. You also need to provide your signing private key, which the Verifier App uses to sign the request."),Object(s.b)("p",null,"To request credentials, you need to specify the credentialType and one or more acceptable issuers (entities that issue those credentials). If you list more than one issuer, the user can share a credential issued by any of the ones you list."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Important"),": The private keys never leave your app. This function, like all the others in this SDK, needs them in order to handle to cryptographic functionality on your behalf."),Object(s.b)("p",null,"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'"verifier": string, // your Verifier DID\n"credentialRequests": CredentialRequest[], // a list of one or more CredentialRequest objects. Describes the Credentials which should be shared to fulfill the PresentationRequest\n"eccPrivateKey": string, // your Verifier\'s Private Key\n"holderAppUuid": string, // identifies which Holder App the PresentationRequest should be sent to\n"expiresAt": string, // Optional. The date and time the PresentationRequest should expire. Default is 10 minutes after creation\n"metadata": object // any additional data to include in the PresentationRequest\n')),Object(s.b)("p",null,"Response Body: ",Object(s.b)("strong",{parentName:"p"},"PresentationRequestResponse")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'{\n  "presentationRequest": {\n    "uuid": string, // identifies the PresentationRequest in the Unum ID database\n    "createdAt": string, // the date and time the PresentationRequest was created\n    "updatedAt": string, // the date and time the PresentationRequest was last updated. This should always be the same as createdAt\n    "expiresAt": string, // the date and time the PresentationRequest expires\n    "verifier": string, // DID identifying the Verifier which created the PresentationRequest\n    "credentialRequests": CredentialRequest[], // a list of one or more CredentialRequest objects. Describes the Credentials which should be shared to fulfill the PresentationRequest\n    "proof": Proof, // a cryptographic proof signed by your Verifier Private Key that can be used to verify the authenticity of the PresentationRequest\n    "metadata": object // any additional data provided when the PresentationRequest was created\n  },\n  "verifier": {\n      "name": string, // verifier name\n      "did": string, // verifier did\n      "url": string // the url of a customer applications that received presentations\n  },\n  "issuers": {\n      "IssuerDid:string": { // a map keyed on the issuer did that issued the requested credential(s)\n        "name": string, // name of the issuer that issued the credential(s)\n        "did": string // issuer did that issued the credential(s) \n      }\n  },\n  "deeplink": string, // a deeplink that can be used to trigger the intended HolderApp to load the PresentationRequest\n  "qrCode": string // a QR code containing the deeplink, encoded as a data URL\n}\n')),Object(s.b)("h4",{id:"verifyencryptedpresentation"},"verifyEncryptedPresentation"),Object(s.b)("p",null,"Verify a encrypted Presentation. "),Object(s.b)("p",null,"This is used in service behind the ",Object(s.b)("inlineCode",{parentName:"p"},"/presentation")," endpoint that needs to be defined according to ",Object(s.b)("a",{parentName:"p",href:"unum.id"},"this")," spec which UnumID's SaaS forwards encrypted Presentations to. It handles decrypting the encrypted presentation and verifies the signature is valid. "),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Important")," Although this request is coming from UnumID's SaaS, UnumID never has access to the credentials within the presentation due to the encryption that only you can decrypt using the associated Verifier's ",Object(s.b)("inlineCode",{parentName:"p"},"encryptionPrivateKey"),"."),Object(s.b)("p",null,"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'"encryptedPresentation": EncryptedData, // the encrypted presentation with sensitive credential information.\n"verifierDid": string, // the did associated with the verifier\'s public that was used to encrypt the presentation by the Holder SDK.\n"encryptionPrivateKey": string // associated Verifier\'s (based on did) `encryptionPrivateKey` attribute that should persisted in your db.\n')),Object(s.b)("p",null,"Response Body: ",Object(s.b)("strong",{parentName:"p"},"DecryptedPresentation")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"{\n  isVerified: boolean; // boolean indicating wether the signatures signed by the subject (user) is valid \n  type: 'VerifiablePresentation' | 'NoPresentation' // type of the presentation. NoPresentation means the presentation request was declined by the user.\n  credentials?: VerifiableCredential[] // (optional) a list of VerifiableCredential objects. This is the decrypted credential information. Only populated if the presentation signatures are verified and of type `VerifiablePresentation`.\n  message?: string; // (optional) message detailing why the verification did not succeed if isVerified is false.\n}\n")),Object(s.b)("h4",{id:"sendsms"},"sendSms"),Object(s.b)("p",null,"Use to send a deep link to a user by SMS. The message will be delivered from an Unum ID associated phone number. You can of course use your own SMS sending service if you prefer."),Object(s.b)("p",null,"To request (a presentation of) credentials from a user, you first create the request object and receive a deep link that references it. The user need to receive this deep link, which will open the correct app on their phone and prompt them to share the credentials. SMS is one convenient channel."),Object(s.b)("p",null,"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'{\n  "to": string, // phone number to send the SMS to\n  "msg": string // message to send\n}\n')),Object(s.b)("p",null,"Response Body: Empty\nIf unsuccessful and exception will be thrown."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"{}\n")),Object(s.b)("h4",{id:"sendemail"},"sendEmail"),Object(s.b)("p",null,"Use to send a deep link to a user by email. The message will be delivered from ",Object(s.b)("a",{parentName:"p",href:"mailto:DoNotReply@UnumID.org."},"DoNotReply@UnumID.org.")," You can of course use your own email sending service if you prefer."),Object(s.b)("p",null,"To request (a presentation of) credentials from a user, you first create the request object and receive a deep link that references it. The user need to receive this deep link, which will open the correct app on their phone and prompt them to share the credentials. Email is one convenient channel, though keep in mind that the user will need to click the link from their phone for the deep link to work."),Object(s.b)("p",null,"Note: JSON special characters such a double quote or backslash in the ",Object(s.b)("inlineCode",{parentName:"p"},"subject")," or ",Object(s.b)("inlineCode",{parentName:"p"},"htmlBody"),' fields will need to be escaped with a backslash, i.e. "the best org in the country" must be \\"the best org in the country\\".'),Object(s.b)("p",null,"Parameters"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},'{\n  "to": string, // target email\n  "from": string, // from email\n  "replyTo": string, // replyTo email\n  "subject": string, // subject of the email\n  "textBody": string, // email message body\n}\n')),Object(s.b)("p",null,"Response Body: Empty\nIf unsuccessful and exception will be thrown."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-typescript"},"{}\n")))}u.isMDXComponent=!0}}]);